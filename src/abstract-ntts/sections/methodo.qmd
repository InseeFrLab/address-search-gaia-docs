
The methodology is based on the implementation of ES to handle large-scale address datasets. Data is organized into JSON **documents**, which represent individual entities. To enable efficient searching, the search engine employs **inverted indices**—a data structure that links terms to the documents where they appear. Its distributed architecture supports the rapid search and analysis of vast data volumes, providing near real-time performance [@es].  

## Address data indices  

Two key indices were developed: one for complete addresses and one for street names.  

**Table 1: Example address index**  

| idAddress | Number | Suffix | Full Address | idStreet | Postal Code |
|----|----|----|:-----------------------------------|----|--------|
| A1   | 10   |    | 10 Boulevard Royal Crescent   | V1 | W1B4AA |
| A2  | 25   |    | 25 Road Kingsway Court   | V2  | W1B4AA |
| A3  | 55 | bis | 55 bis Street Michael's Mount  | V3  | SW36PE |

**Table 2: Example street index**  

| idStreet | Type of Street | Name of Street | Postal Code |
|------------|------------|:------------|------------|
| V1   | Boulevard   |  Royal Crescent  | W1B4AA |
| V2  | Road   | Kingsway Court   | W1B4AA |
| V3  | Street | Michael's Mount | SW36PE |

In reality, other variables are present in the indices, including geolocation variables. However, these are not useful for conducting text-based address search.
To enable effective searches, it is crucial that the data in the indices is processed in the same way as the addresses being identified. For this reason, the same filters are applied, called **analyzers**, to both the indices and the inputs to the search engine. These include:

- Lowercasing
- Accents handling
- Punctuation handling
- Use of synonym lists to normalize spellings

## Searching process  

To search for an address using this engine, the input must include a complete address string, for example, "10 bd Royal Crescent", along with its postal code string, such as "W1B4AA". Multiple queries will then be executed:  

1. **Exact Match Query:** A strict query is performed within the town to match the exact address string. The query returns addresses from the index where the *"full address"* field matches exactly with the address provided. It bypasses tokenization, which is applied by default in ES, to ensure precision. This step allows a quick identification of addresses with perfect spelling after applying the analyzers, resulting in a time-saving process. If the address is not identified at this stage, the process moves on to the next step.  

2. **Street-Level Query:** This step involves a more complex query with fuzzy matching to identify the street within the town. A fuzzy matching is an efficient approximate string matching technique [@fuzzy]. Correcting a string with a fuzziness level of 1 means adding a letter, removing a letter, replacing a letter, or swapping two letters. In order for a street to be returned in the search results, at least one of the following conditions must be met:  
    - Matching the hole street name with a fuzziness level of 1  
    - Matching one token of the street type or street name with a fuzziness level of 1  
    - Matching one n-gram of the street name (n = 3, 4 and 5)  

Each time a condition is met, the street's **score** increases. Additionally, weights 	have been applied to these conditions, referred to as **“boosts”**. Here, the first 	condition carries the most weight. The street with the highest score will be 	chosen. In addition, an external verification outside of Elasticsearch is performed 	to validate the selected street. If the address provided contains less than 10% of 	the trigrams from the reference street, the street is considered not correct.  

3. **Number and suffix Query:** If the street is identified, the algorithm searches for addresses within the street (*idStreet*). To be returned, the address numbers in the index must match exactly the number extracted from the address to identify. This extraction is performed using a custom-developed **RegEx**. Additionally, a function has been implemented to check the provided address for suffix, and if any are found, the reference addresses with the same suffix will be boosted.  

![](schema_moteur.jpg){width=75% fig-align="center"}

**Figure 1. Overview diagram of the full identification process**  
