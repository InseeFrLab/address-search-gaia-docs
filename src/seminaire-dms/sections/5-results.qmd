## Constitution d'un jeu de test

- [**Idée : avoir des adresses avec des variations textuelles et leur idGaïaAdresse associé (vérité).**]{.red2}  
- Le jeu de test est une suite d'appariements de sources de données :  
    - **PASRAU** : Prélèvement À la Source sur les Revenus AUtres.  
    - **TSSAL** : Base tous salariés, issue de la déclaration sociale nominative.  
    - **Fidéli** : FIchiers DÉmographiques sur les Logements et les Individus.  

## Schéma appariements jeu de test

![](img/jeu_test.png){width=75% fig-align="center"}

::: {.notes}
- PASRAU : Ce sont des données administratives générées par le prélèvement à la source sur les retraites et d'autres revenus (mais pas les salaires).
- Adresses du PASRAU et Tous Salariés (TTSAL) avec le CSNS de l'individu connu pour chaque adresse.  
- Grâce aux CSNS des individus Fidéli 2022, obtention de l'identifiant Majic de ces adresses.
- Avec l'identifiant Majic des adresses, conservé dans le référentiel Gaïa, on retrouve l'idGaïaAdresse.  
- Validation post-appariements des paires adresse non normalisée (PASRAU, TSSAL)) + idGaïaAdresse.  
:::

::: {.notes}
Maintenant qu'on a le jeu de test, on peut evaluer l'algo.
:::

## Évaluation de l'algorithme d'identification

Pour 100 000 adresses issues du jeu de test sur tout le territoire français :  

|             | **Adresse trouvée** | **Voie trouvée** | **Commune trouvée/rien trouvé** |
|-------------|-----------------|--------------|-----------------------------|
| **Pourcentage** | [**86,0%**]{.red2} | [**99,5%**]{.red2} | 0,5% |
| **Précision**    | 0.94  | 0.94  | x    |

Appariement direct avec filtres entre adresses à retrouver et référentiel Gaïa : [**30% d'identification à l'adresse**]{.blue2}.

::: {.notes}

- Précision = Vrais positifs/ positifs (vp + fp)  

- A titre de comparaison, un appariement direct entre les adresses à retrouver et le référentiel Gaïa donnerait 30% d'identification à condition que les filtres présentés précédemment soient appliqués.  

- Le reste des adresses doivent être retrouvées avec du flou, ce qui est très long dans une bdd standard.  

- Donc ce qui justifie l'utilisation d'un moteur en terme de précision mais aussi en terme de performances temporelles, notamment grace à l'index inversé.
:::

## Rapidité de l'algorithme

- [**500 adresses en 2 secondes**]{.blue2}.  
- Identification de gros paquets d'adresses : [**1 million d'adresses en 50 minutes**]{.green2}.
- Démonstration en direct du moteur ⚙️ ElasticSearch développé en [**Python**]{.red2}.

::: {.notes}
{
  "adresseComplete": "48 rue fontaine",
  "depcom": "",
  "codePostal": "14530",
  "libelleCommune": "luc s/mer"
}
:::
<!-- ## Utilisation du moteur au sein du projet Gaïa

Métriques sur les mises à jour du référentiel :
- .... -->
