[
  {
    "objectID": "src/documentation/elasticsearch.html",
    "href": "src/documentation/elasticsearch.html",
    "title": "Identification d’adresse",
    "section": "",
    "text": "L’objectif est de founir un service qui prend une adresse en entrée (couple string adresse/string code insee), et renvoie un identifiant Gaïa le plus précis possible et des informations sur la qualité de l’identification. Il y a 3 niveaux d’identifiants Gaïa :\n- IdGaïaAdresse (le plus précis)\n- IdGaïaVoie (lorsque le numéro n’est pas retrouvé, mais que la voie si)\n- idGaïaCommune (lorsque ni l’adresse, ni la voie ne sont identifiées)\nExemple : {“adresseComplete”: “131 rue du faubourg bannier”, “depcom”: “45324”}.\nLe depcom est le Code Officiel Géographique de la commune.\n\n\n\nSchéma algorithme d’identification d’adresse avec ElasticSearch\n\n\n\n\nIl existe deux indices : adresses contenant toutes les adresses fraçaises et voies contenant toutes les voies fraçaises.\nExemple : une adresse est “20 rue hoche” et une voie est “rue hoche”.\nLa première étape est la recherche stricte de l’adresse recherchée dans l’index adresses sur les adresses de la commune uniquement.\nSi aucun IdGaïaAdresse ne ressort à l’issue de l’étape 1, alors :\n- Recherche floue dans l’index voies sur les adresses de la commune uniquement, pour retrouver l’IdGaïaVoie (étape 2).\n- Recherche dans l’index adresses sur les adresses de la voie trouvée à l’étape 1 uniquement, pour retrouver l’idGaïaAdresse (étape 3).\nLa qualité globale de l’appariement est appréciée au travers de deux indicateurs : un code retour qui donne, sur une échelle de 0 à 10, une vision globale sur le retour de l’algorithme et un score relatif pour repérer d’éventuelles concurrences entre réponses de qualité proche.\n\n\nL’information principale est fournie par un code retour, qui vise à indiquer les éléments qui ont été identifiés dans le processus d’appariement.\nL’algorithme recherche d’abord la commune indiquée (pour l’instant cette étape n’est pas faite avec ElasticSearch), puis la voie au sein de la commune et enfin l’adresse dans la voie, c’est-à-dire l’existence du numéro et de l’indice de répétition dans les adresses de la voie.\nLa voie retrouvée est typée selon quatre catégories, en fonction du nombre de trigrammes retrouvés :\n\nvoie sûre : l’adresse contient plus de 65 % des trigrammes de la voie du référentiel\n\nvoie peu douteuse : l’adresse contient entre 35 % et 65 % des trigrammes de la voie du référentiel\n\nvoie douteuse : l’adresse contient entre 10 % et 35 % des trigrammes de la voie du référentiel\n\nvoie non retrouvée : pas d’écho ou l’adresse contient moins de 10 % des trigrammes de la voie du référentiel\n\nEn ce qui concerne les adresses, les contrôles portent sur le numéro et l’indice de répétition :\n\nSi l’adresse demandée ne contient pas d’indice de répétition et que le numéro est trouvé, alors l’adresse est sûre.\n\nSi l’adresse demandée contient un indice de répétition et s’il est retrouvé, l’adresse est sûre.\n\nSi l’adresse demandée contient un indice de répétition mais qu’il n’est pas retrouvé, alors l’adresse est douteuse.\n\nSi le numéro n’est pas retrouvé exactement, aucune adresse n’est retournée.\n\nSi une voie est douteuse, alors la qualité de l’adresse globale est douteuse : on ne distingue donc pas les cas où l’adresse est sûre et douteuse.\n\n\n\n\n\n\n\n\n\nAdresse\nVoie\nCode_retour\nLibellé\n\n\n\n\nsûre\nsûre\n10\nAppariement direct sur l’adresse\n\n\nsûre\nsûre\n9\nAdresse sûre\n\n\ndouteuse\nsûre\n8\nAdresse douteuse dans voie sûre\n\n\nsûre & douteuse\ndouteuse\n7\nAdresse dans voie douteuse\n\n\nsûre & douteuse\ntrès douteuse\n6\nAdresse dans voie très douteuse\n\n\npas d’adresse trouvée\nsûre\n5\nVoie sûre sans adresse\n\n\npas d’adresse trouvée\ndouteuse\n4\nVoie douteuse sans adresse\n\n\npas d’adresse trouvée\ntrès douteuse\n3\nVoie très douteuse sans adresse\n\n\npas d’adresse trouvée\npas de voie trouvée\n2\nCommune seulement\n\n\npas d’adresse trouvée\npas de voie trouvée\n1\nAdresse à l’étranger\n\n\npas d’adresse trouvée\npas de voie trouvée\n0\nProblème dans les données (par exemple, commune non trouvée)\n\n\n\n\n\n\nL’objectif de cette information complémentaire est d’indiquer la position de l’écho retourné par rapport aux autres échos possibles dans l’index voies, lors de la requête à l’étape 2. Il permet d’évaluer si le score Elastic du premier écho (noté R1) est bien supérieur au score du second (noté R2).\nLa formule du ratio est 1-(R2/R1) ; si le score est supérieur à 0,9999, il est ramené à 0,9999.\nSi la valeur est proche de 1, alors le premier écho se détache nettement des autres et donc la recherche est sans ambiguïté. A l’inverse, si la valeur est proche de 0, alors le premier et le second écho ont le même score et la recherche aurait donc pu retourner un autre résultat.\nLe score relatif est compris entre 0 et 1 et donné avec 4 décimales. Le score maximal est de 0,9999, afin de pouvoir être utilisé en combinaison avec le code retour.\n\n\n\n\nLa logique globale de l’algorithme est la suivante :\n\nOn va enchaîner des étapes de contrôles, d’interrogation d’ElasticSearch, de règles de décision.\n\nA chaque étape, il est possible d’attribuer un code retour “sortant” à l’adresse qu’on souhaite identifier. Par exemple, si l’adresse est vide, on attribue un code retour 0 et l’adresse ne va pas plus loin dans l’algorithme.\n\nSi l’adresse n’a pas de code retour attribué, alors on continue dans l’algorithme.\n\nComme précisé plus haut, l’algorithme marche en 4 étapes d’identification: commune —&gt; adresse exacte –si pas de match-&gt; voie —&gt; adresse\n\n\nLes données du client et dans l’index sont traitées de la même façon pour maximiser les matchs :\n- Lowercase\n- Asciifolding\n- Traitement de la ponctuation\n- Utilisation de listes de synonymes\n\n\n\nL’identification à la commune se fait à travers un dictionnaire, pour récupérer l’idGaïaCommune et passer à l’étape suivante.\n\n\n\nAfin d’accélerer notre procédure d’identification, une requête simple et rapide nous permet d’identifier une adresse si son orthographe est parfaite. Cette requête consiste à rechercher au sein des adresses de la commune identifiée à l’étape précédente grâce à un filter sur l’idGaïaCommune, les adresses dont la variable adresseComplete (string représentant l’adresse contenant le numéro, l’indice de répétition, le type et le nom de voie) correspond parfaitement au string envoyé par le client. Ceci est assuré par le caractère stricte de la requête must, accompagné d’un minimum_should_match=100%.\nPour gagner encore plus de temps, la variable adresseComplete ainsi que le string client ne sont pas découpés en token, comme dans les réglages par défaut d’ElasticSearch (le minimum should match est un seuil sur le nombre ou la proportion de bouts matchés entre le résultats de l’index et la demande du client, et un bout peut être le string complet, tout comme un token ou un ngram). Alors, le moteur va retourner l’adresse qui est parfaitement incluse dans le string envoyé.\nEn présence d’un résultat à cette requête, le premier echo est conservé avec un code retour 10 et l’algorithme d’identification se termine à cette étape.\n\n\n\nLa requête pour identifier à la voie est plus complexe car elle inclut la possibilité d’avoir du flou dans l’adresse à rechercher.\nPour faciliter la recherche, un filtre est appliqué pour ne requêter que les voies dans la commune identifiée à l’étape 0.\nC’est une succession de should où au moins l’un d’entre eux doit être validé pour que la voie soit renvoyée :\n- Le nom de voie dans l’index non tokenisé est matché avec une fuzziness de 1 (boost : 200)\n- Le type de voie et/ou le nom de voie du référentiel sont inclus dans l’adresse client avec une fuzziness de 1 (boosts respectifs : 5 et 15)\n- Au moins un ngram du nom de voie de l’index, de taille 3 à 5, correspond (boost par ngram : 1)\nEnsuite, une multitude de vérifications sont appliquées sur le premier echo (s’il existe), qui va déterminer si la voie est sûre, peu douteuse, douteuse ou non retrouvée (citées plus haut).\nS’il n’y a pas de retour ElasticSearch ou si la voie est jugée comme non retrouvée d’après les règles, un code retour 2 sera affiché.\n\n\n\nPour retrouver l’adresse à partir de la voie, nous allons chercher dans les adresses de la voie identifiée à l’étape 2 (avec un filter sur idGaïaVoie) et demander à matcher sur les champs numéro et/ou indice de répétition dans notre base.\nDes regex ont été développées pour extraire le numéro de l’adresse dans le string client et qui détecte la présence d’indice de répétition dans celle-ci. Ensuite, un must est appliqué sur le champ numéro avec l’extraction du numéro. Si l’extraction ne retourne rien, le numéro recherché par le must sera alors “0”. L’indice de répétition sera recherché avec un should.\nSi le moteur retourne plusieurs adresses, l’adresse retournée sera :\n- celle qui a un indice de répétition si un indice a été détecté dans l’adresse recherchée\n- celle qui n’a pas d’indice de répétition si aucun indice n’a été détecté dans l’adresse recherchée\nDans le cas où un idGaïaAdresse est trouvé, il sera accompagné d’un code retour 7, 8 ou 9.\nFinalement, dans le cas où aucune adresse ne ressort, alors un code retour 3, 4 ou 5 sera attribué en fonction de la fiabilité de la voie identifiée.",
    "crumbs": [
      "Accueil",
      "Navigation",
      "Identification d'adresse avec ElasticSearch"
    ]
  },
  {
    "objectID": "src/documentation/elasticsearch.html#fonctionnement-de-lidentification",
    "href": "src/documentation/elasticsearch.html#fonctionnement-de-lidentification",
    "title": "Identification d’adresse",
    "section": "",
    "text": "Il existe deux indices : adresses contenant toutes les adresses fraçaises et voies contenant toutes les voies fraçaises.\nExemple : une adresse est “20 rue hoche” et une voie est “rue hoche”.\nLa première étape est la recherche stricte de l’adresse recherchée dans l’index adresses sur les adresses de la commune uniquement.\nSi aucun IdGaïaAdresse ne ressort à l’issue de l’étape 1, alors :\n- Recherche floue dans l’index voies sur les adresses de la commune uniquement, pour retrouver l’IdGaïaVoie (étape 2).\n- Recherche dans l’index adresses sur les adresses de la voie trouvée à l’étape 1 uniquement, pour retrouver l’idGaïaAdresse (étape 3).\nLa qualité globale de l’appariement est appréciée au travers de deux indicateurs : un code retour qui donne, sur une échelle de 0 à 10, une vision globale sur le retour de l’algorithme et un score relatif pour repérer d’éventuelles concurrences entre réponses de qualité proche.\n\n\nL’information principale est fournie par un code retour, qui vise à indiquer les éléments qui ont été identifiés dans le processus d’appariement.\nL’algorithme recherche d’abord la commune indiquée (pour l’instant cette étape n’est pas faite avec ElasticSearch), puis la voie au sein de la commune et enfin l’adresse dans la voie, c’est-à-dire l’existence du numéro et de l’indice de répétition dans les adresses de la voie.\nLa voie retrouvée est typée selon quatre catégories, en fonction du nombre de trigrammes retrouvés :\n\nvoie sûre : l’adresse contient plus de 65 % des trigrammes de la voie du référentiel\n\nvoie peu douteuse : l’adresse contient entre 35 % et 65 % des trigrammes de la voie du référentiel\n\nvoie douteuse : l’adresse contient entre 10 % et 35 % des trigrammes de la voie du référentiel\n\nvoie non retrouvée : pas d’écho ou l’adresse contient moins de 10 % des trigrammes de la voie du référentiel\n\nEn ce qui concerne les adresses, les contrôles portent sur le numéro et l’indice de répétition :\n\nSi l’adresse demandée ne contient pas d’indice de répétition et que le numéro est trouvé, alors l’adresse est sûre.\n\nSi l’adresse demandée contient un indice de répétition et s’il est retrouvé, l’adresse est sûre.\n\nSi l’adresse demandée contient un indice de répétition mais qu’il n’est pas retrouvé, alors l’adresse est douteuse.\n\nSi le numéro n’est pas retrouvé exactement, aucune adresse n’est retournée.\n\nSi une voie est douteuse, alors la qualité de l’adresse globale est douteuse : on ne distingue donc pas les cas où l’adresse est sûre et douteuse.\n\n\n\n\n\n\n\n\n\nAdresse\nVoie\nCode_retour\nLibellé\n\n\n\n\nsûre\nsûre\n10\nAppariement direct sur l’adresse\n\n\nsûre\nsûre\n9\nAdresse sûre\n\n\ndouteuse\nsûre\n8\nAdresse douteuse dans voie sûre\n\n\nsûre & douteuse\ndouteuse\n7\nAdresse dans voie douteuse\n\n\nsûre & douteuse\ntrès douteuse\n6\nAdresse dans voie très douteuse\n\n\npas d’adresse trouvée\nsûre\n5\nVoie sûre sans adresse\n\n\npas d’adresse trouvée\ndouteuse\n4\nVoie douteuse sans adresse\n\n\npas d’adresse trouvée\ntrès douteuse\n3\nVoie très douteuse sans adresse\n\n\npas d’adresse trouvée\npas de voie trouvée\n2\nCommune seulement\n\n\npas d’adresse trouvée\npas de voie trouvée\n1\nAdresse à l’étranger\n\n\npas d’adresse trouvée\npas de voie trouvée\n0\nProblème dans les données (par exemple, commune non trouvée)\n\n\n\n\n\n\nL’objectif de cette information complémentaire est d’indiquer la position de l’écho retourné par rapport aux autres échos possibles dans l’index voies, lors de la requête à l’étape 2. Il permet d’évaluer si le score Elastic du premier écho (noté R1) est bien supérieur au score du second (noté R2).\nLa formule du ratio est 1-(R2/R1) ; si le score est supérieur à 0,9999, il est ramené à 0,9999.\nSi la valeur est proche de 1, alors le premier écho se détache nettement des autres et donc la recherche est sans ambiguïté. A l’inverse, si la valeur est proche de 0, alors le premier et le second écho ont le même score et la recherche aurait donc pu retourner un autre résultat.\nLe score relatif est compris entre 0 et 1 et donné avec 4 décimales. Le score maximal est de 0,9999, afin de pouvoir être utilisé en combinaison avec le code retour.",
    "crumbs": [
      "Accueil",
      "Navigation",
      "Identification d'adresse avec ElasticSearch"
    ]
  },
  {
    "objectID": "src/documentation/elasticsearch.html#algorithme-didentification",
    "href": "src/documentation/elasticsearch.html#algorithme-didentification",
    "title": "Identification d’adresse",
    "section": "",
    "text": "La logique globale de l’algorithme est la suivante :\n\nOn va enchaîner des étapes de contrôles, d’interrogation d’ElasticSearch, de règles de décision.\n\nA chaque étape, il est possible d’attribuer un code retour “sortant” à l’adresse qu’on souhaite identifier. Par exemple, si l’adresse est vide, on attribue un code retour 0 et l’adresse ne va pas plus loin dans l’algorithme.\n\nSi l’adresse n’a pas de code retour attribué, alors on continue dans l’algorithme.\n\nComme précisé plus haut, l’algorithme marche en 4 étapes d’identification: commune —&gt; adresse exacte –si pas de match-&gt; voie —&gt; adresse\n\n\nLes données du client et dans l’index sont traitées de la même façon pour maximiser les matchs :\n- Lowercase\n- Asciifolding\n- Traitement de la ponctuation\n- Utilisation de listes de synonymes\n\n\n\nL’identification à la commune se fait à travers un dictionnaire, pour récupérer l’idGaïaCommune et passer à l’étape suivante.\n\n\n\nAfin d’accélerer notre procédure d’identification, une requête simple et rapide nous permet d’identifier une adresse si son orthographe est parfaite. Cette requête consiste à rechercher au sein des adresses de la commune identifiée à l’étape précédente grâce à un filter sur l’idGaïaCommune, les adresses dont la variable adresseComplete (string représentant l’adresse contenant le numéro, l’indice de répétition, le type et le nom de voie) correspond parfaitement au string envoyé par le client. Ceci est assuré par le caractère stricte de la requête must, accompagné d’un minimum_should_match=100%.\nPour gagner encore plus de temps, la variable adresseComplete ainsi que le string client ne sont pas découpés en token, comme dans les réglages par défaut d’ElasticSearch (le minimum should match est un seuil sur le nombre ou la proportion de bouts matchés entre le résultats de l’index et la demande du client, et un bout peut être le string complet, tout comme un token ou un ngram). Alors, le moteur va retourner l’adresse qui est parfaitement incluse dans le string envoyé.\nEn présence d’un résultat à cette requête, le premier echo est conservé avec un code retour 10 et l’algorithme d’identification se termine à cette étape.\n\n\n\nLa requête pour identifier à la voie est plus complexe car elle inclut la possibilité d’avoir du flou dans l’adresse à rechercher.\nPour faciliter la recherche, un filtre est appliqué pour ne requêter que les voies dans la commune identifiée à l’étape 0.\nC’est une succession de should où au moins l’un d’entre eux doit être validé pour que la voie soit renvoyée :\n- Le nom de voie dans l’index non tokenisé est matché avec une fuzziness de 1 (boost : 200)\n- Le type de voie et/ou le nom de voie du référentiel sont inclus dans l’adresse client avec une fuzziness de 1 (boosts respectifs : 5 et 15)\n- Au moins un ngram du nom de voie de l’index, de taille 3 à 5, correspond (boost par ngram : 1)\nEnsuite, une multitude de vérifications sont appliquées sur le premier echo (s’il existe), qui va déterminer si la voie est sûre, peu douteuse, douteuse ou non retrouvée (citées plus haut).\nS’il n’y a pas de retour ElasticSearch ou si la voie est jugée comme non retrouvée d’après les règles, un code retour 2 sera affiché.\n\n\n\nPour retrouver l’adresse à partir de la voie, nous allons chercher dans les adresses de la voie identifiée à l’étape 2 (avec un filter sur idGaïaVoie) et demander à matcher sur les champs numéro et/ou indice de répétition dans notre base.\nDes regex ont été développées pour extraire le numéro de l’adresse dans le string client et qui détecte la présence d’indice de répétition dans celle-ci. Ensuite, un must est appliqué sur le champ numéro avec l’extraction du numéro. Si l’extraction ne retourne rien, le numéro recherché par le must sera alors “0”. L’indice de répétition sera recherché avec un should.\nSi le moteur retourne plusieurs adresses, l’adresse retournée sera :\n- celle qui a un indice de répétition si un indice a été détecté dans l’adresse recherchée\n- celle qui n’a pas d’indice de répétition si aucun indice n’a été détecté dans l’adresse recherchée\nDans le cas où un idGaïaAdresse est trouvé, il sera accompagné d’un code retour 7, 8 ou 9.\nFinalement, dans le cas où aucune adresse ne ressort, alors un code retour 3, 4 ou 5 sera attribué en fonction de la fiabilité de la voie identifiée.",
    "crumbs": [
      "Accueil",
      "Navigation",
      "Identification d'adresse avec ElasticSearch"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Moteur de recherche d’adresses Gaïa",
    "section": "",
    "text": "Moteur de recherche d’adresses Gaïa\n\n\n\n\n  \n     \n      \n        \n          \n            \n          \n         \n        \n          \n            Documentation\n            \n\n            \n              Description : Ici est rassemblée toute la documentation technique sur le moteur de recherche d'adresse textuel Gaïa\n\n            \n\n            \n            \n              \n                Raya Berova\n                Nov 27, 2024\n              \n            \n            \n            \n              \n                \n                  \n                    \n                      \n                        doc\n                      \n                    \n                  \n                \n              \n            \n          \n        \n\n        \n\n      \n     \n  \n\n  \n     \n      \n        \n          \n            \n          \n         \n        \n          \n            Séminaire interne DMS\n            \n\n            \n              Description : Ce séminaire a pour but de présenter le moteur de recherche d'adresse Gaïa et de diffuser les connaissances sur ElasticSearch au sein de l'Insee.\n\n            \n\n            \n            \n              \n                Raya Berova\n                Nov 27, 2024\n              \n            \n            \n            \n              \n                \n                  \n                    \n                      \n                        pdf\n                      \n                    \n                  \n                \n              \n            \n          \n        \n\n        \n\n      \n     \n  \n\n  \n     \n      \n        \n          \n            \n          \n         \n        \n          \n            Abstract NTTS 2025 (Eurostat)\n            \n\n            \n              Description : Abstract en anglais soumis à NTTS 2025.\n\n            \n\n            \n            \n              \n                Raya Berova\n                Nov 27, 2024\n              \n            \n            \n            \n              \n                \n                  \n                    \n                      \n                        pdf\n                      \n                    \n                  \n                \n              \n            \n          \n        \n\n        \n\n      \n     \n  \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "src/documentation/index.html",
    "href": "src/documentation/index.html",
    "title": "Accueil de la documentation",
    "section": "",
    "text": "Informations de connexion via Filezilla en protocole FTP (connexion FTP simple)\n\n\n\n\n\n\n\n\nPlateforme\nURL\nVM\n\n\n\n\nDV\nhttps://api-interrogation-geo.developpement.insee.fr/swagger-ui/index.html\ndvgaialm001\n\n\nDV2\nhttps://api-interrogation-geo.developpement2.insee.fr/swagger-ui/index.html\ndvgaialm002\n\n\nPREPROD\nhttps://api-interrogation-geo.preprod.insee.fr/swagger-ui/index.html\npdgaialm001/2/3\n\n\nPROD\nhttps://api-interrogation-geo.insee.fr/swagger-ui/index.html\npdgaialm001/2/3\n\n\n\nPour requêter le service d’identification, il faut que l’utilisateur soit authentifié en ayant récupéré un jeton Keycloak au préalable et qu’il bénéficie du rôle IDENTIFICATION_GAIA. Si ce n’est pas le cas, contactez l’équipe Gaïa sur Tchap ou mail.\n\n\n\nPour lancer une identification avec le moteur ElasticSearch développé en python, il faut aller sur le dépôt git et lire le README. Il est possible d’accéder au dépôt en cliquant ici Moteur de recherche Gaïa. Puis aller sur LS3 pour cloner le projet.\n⚠️ Attention : il faut avoir les droits pour accéder au dépôt et être dans le projet LS3. Si ce n’est pas le cas, contactez l’équipe Gaïa sur Tchap ou mail.",
    "crumbs": [
      "Accueil",
      "Navigation",
      "Accueil"
    ]
  },
  {
    "objectID": "src/documentation/index.html#recherche-simple-les-swaggers",
    "href": "src/documentation/index.html#recherche-simple-les-swaggers",
    "title": "Accueil de la documentation",
    "section": "",
    "text": "Informations de connexion via Filezilla en protocole FTP (connexion FTP simple)\n\n\n\n\n\n\n\n\nPlateforme\nURL\nVM\n\n\n\n\nDV\nhttps://api-interrogation-geo.developpement.insee.fr/swagger-ui/index.html\ndvgaialm001\n\n\nDV2\nhttps://api-interrogation-geo.developpement2.insee.fr/swagger-ui/index.html\ndvgaialm002\n\n\nPREPROD\nhttps://api-interrogation-geo.preprod.insee.fr/swagger-ui/index.html\npdgaialm001/2/3\n\n\nPROD\nhttps://api-interrogation-geo.insee.fr/swagger-ui/index.html\npdgaialm001/2/3\n\n\n\nPour requêter le service d’identification, il faut que l’utilisateur soit authentifié en ayant récupéré un jeton Keycloak au préalable et qu’il bénéficie du rôle IDENTIFICATION_GAIA. Si ce n’est pas le cas, contactez l’équipe Gaïa sur Tchap ou mail.",
    "crumbs": [
      "Accueil",
      "Navigation",
      "Accueil"
    ]
  },
  {
    "objectID": "src/documentation/index.html#recherche-avancée-code-python",
    "href": "src/documentation/index.html#recherche-avancée-code-python",
    "title": "Accueil de la documentation",
    "section": "",
    "text": "Pour lancer une identification avec le moteur ElasticSearch développé en python, il faut aller sur le dépôt git et lire le README. Il est possible d’accéder au dépôt en cliquant ici Moteur de recherche Gaïa. Puis aller sur LS3 pour cloner le projet.\n⚠️ Attention : il faut avoir les droits pour accéder au dépôt et être dans le projet LS3. Si ce n’est pas le cas, contactez l’équipe Gaïa sur Tchap ou mail.",
    "crumbs": [
      "Accueil",
      "Navigation",
      "Accueil"
    ]
  },
  {
    "objectID": "src/seminaire-dms/index.html#origine-du-projet",
    "href": "src/seminaire-dms/index.html#origine-du-projet",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Origine du projet",
    "text": "Origine du projet\n\nBesoin d’un référentiel complet, stable, fiable, mis à jour.\nFaciliter la gestion des adresses au sein du SSP.\nClients : Résil, Géoloc, DMTR…\n\nGaïa : Référentiel Géographique d’Adresses avec Informations Géolocalisantes.\n\nParler de l’origine du projet, quand ca a été mis en place, comment, pq…"
  },
  {
    "objectID": "src/seminaire-dms/index.html#une-adresse",
    "href": "src/seminaire-dms/index.html#une-adresse",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Une adresse",
    "text": "Une adresse\n\n\n\n\n\n20 bis avenue de la marne 92049"
  },
  {
    "objectID": "src/seminaire-dms/index.html#géométrie-de-ladresse",
    "href": "src/seminaire-dms/index.html#géométrie-de-ladresse",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Géométrie de l’adresse",
    "text": "Géométrie de l’adresse\nExemple: “88 avenue verdier | 92049” reliée à sa parcelle"
  },
  {
    "objectID": "src/seminaire-dms/index.html#le-référentiel-gaïa",
    "href": "src/seminaire-dms/index.html#le-référentiel-gaïa",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Le référentiel Gaïa",
    "text": "Le référentiel Gaïa\n\n\nAutres données disponibles (aspect géométrique des objets) :\n\nPour chaque adresse Gaïa : point gps, lien parcelle.\n\nPour chaque commune Gaïa : polygone."
  },
  {
    "objectID": "src/seminaire-dms/index.html#identifiants-gaïa",
    "href": "src/seminaire-dms/index.html#identifiants-gaïa",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Identifiants Gaïa",
    "text": "Identifiants Gaïa\nIdentifiant unique et stable pour assurer le suivi des objets dans le temps.\n\nTrois niveaux :\n\nIdentifiant adresse\nIdentifiant voie\nIdentifiant commune\n\n\nGestion des scissions et fusions de communes."
  },
  {
    "objectID": "src/seminaire-dms/index.html#construction-du-référentiel",
    "href": "src/seminaire-dms/index.html#construction-du-référentiel",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Construction du référentiel",
    "text": "Construction du référentiel\nSources fiables :\n\nMajic : Mise à jour des informations cadastrales.\n\nBAN : Base Adresse Nationale.\n\nRCA : Référentiel Commun d’Adresses.\n\n\nAu moins une mise à jour par trimestre (avec conservation des identifiants Gaïa).\n\nUne mise à jour :\n\nRécupérer la nouvelle base d’une source données.\n\nIdentifier les adresses textuellement :\n\n\n\nLes adresses qui sont retrouvées sont alors modifiées si des nouveautés apparaissent.\n\nLes adresses non retrouvées entraînent la création de nouveaux objets Gaïa.\nL’étape d’identification des adresses permet de ne pas écraser les identifiants Gaïa."
  },
  {
    "objectID": "src/seminaire-dms/index.html#dautres-données",
    "href": "src/seminaire-dms/index.html#dautres-données",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "D’autres données",
    "text": "D’autres données\n\nPolygones du bâti.\n\nPolygones Parcelles du cadastre.\n\nPolygones QPV, zonages infra, iris.\n\nPas d’identifiant Gaïa, donc pas de suivi dans le temps de ces objets."
  },
  {
    "objectID": "src/seminaire-dms/index.html#exemples-de-géométries",
    "href": "src/seminaire-dms/index.html#exemples-de-géométries",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Exemples de géométries",
    "text": "Exemples de géométries\nExemple de géométries d’adresses, parcelles et bâtis"
  },
  {
    "objectID": "src/seminaire-dms/index.html#quelques-métriques-sur-le-référentiel",
    "href": "src/seminaire-dms/index.html#quelques-métriques-sur-le-référentiel",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Quelques métriques sur le référentiel",
    "text": "Quelques métriques sur le référentiel\n\nNombre d’adresses ≃ 27 millions.\n\nNombre de voies ≃ 3 millions."
  },
  {
    "objectID": "src/seminaire-dms/index.html#différents-besoins-au-sein-du-ssp",
    "href": "src/seminaire-dms/index.html#différents-besoins-au-sein-du-ssp",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Différents besoins au sein du SSP",
    "text": "Différents besoins au sein du SSP\n\nRésil :\n\nIdentification le(s) adresse(s) des individus.\n\nRegroupement des adresses avec différents identifiants Gaïa mais qui représentent le même lieu.\n\nGéoloc : identification du référentiel Géoloc et génération de leur nouveau référentiel.\n\nAutres utilisateurs possibles :\n\nIdentification des adresses sur les certificats de décès.\n\nIdentification des adresses de Sirus."
  },
  {
    "objectID": "src/seminaire-dms/index.html#besoin-didentification-des-adresses-textuelles",
    "href": "src/seminaire-dms/index.html#besoin-didentification-des-adresses-textuelles",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Besoin d’identification des adresses textuelles",
    "text": "Besoin d’identification des adresses textuelles\nTrouver l’identifiant d’adresse à partir d’un libellé d’adresse plus ou moins correcte.\n\nBesoin visiblement récurrent au sein du SSP.\n\nIndispensable pour construire et mettre à jour le référentiel.\n\nIl faut donc un moteur de recherche ⚙️."
  },
  {
    "objectID": "src/seminaire-dms/index.html#adresses-à-retrouver-dans-gaïa",
    "href": "src/seminaire-dms/index.html#adresses-à-retrouver-dans-gaïa",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Adresses à retrouver dans Gaïa",
    "text": "Adresses à retrouver dans Gaïa\nExemple d’adresses à retrouver :\n\n\n\n\n\n\n\n\n\nAdresse à retrouver\nCOG\nCode Postal\nLibellé commune\n\n\n\n\n131, rue du fbg Bannier\n\n45000\nOrléans\n\n\n0033 ave J. Jaurès\n92040\n\n\n\n\n\nAdresses dans Gaïa :\n\n\n\nAdresse\nCOG\n\n\n\n\n131 rue du faubourg bannier\n45234\n\n\n33 avenue jean jaures\n92040\n\n\n\n\nC’est pourquoi il faut un moteur de recherche ⚙️."
  },
  {
    "objectID": "src/seminaire-dms/index.html#un-moteur-de-recherche",
    "href": "src/seminaire-dms/index.html#un-moteur-de-recherche",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Un moteur de recherche ⚙️",
    "text": "Un moteur de recherche ⚙️\n\nGoogle : recherche par mot clé.\n\nPour la recherche d’adresse :\n\nGoogle Maps.\nAddok : moteur de recherche de la BAN."
  },
  {
    "objectID": "src/seminaire-dms/index.html#elasticsearch",
    "href": "src/seminaire-dms/index.html#elasticsearch",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "ElasticSearch",
    "text": "ElasticSearch\n\nCréé en 2010 par Shay Bannon.\n\nMoteur ⚙️ utilisable en n’importe quel langage de programmation (requêtes HTTP).\n\nFaire des recherches rapides sur tout type de données (textes, objets géométriques…).\n\n\nPour trier et chercher les recettes de cuisine de sa femme psq il trouvait pas de moteur de recherche adapté."
  },
  {
    "objectID": "src/seminaire-dms/index.html#cest-quoi-concrètement-elasticsearch",
    "href": "src/seminaire-dms/index.html#cest-quoi-concrètement-elasticsearch",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "C’est quoi concrètement ElasticSearch ?",
    "text": "C’est quoi concrètement ElasticSearch ?\n\nElasticSearch : logiciel pour l’indexation et la recherche de données.\nUtilisation en pratique avec Python : packages elasticsearch et elasticsearch-dsl."
  },
  {
    "objectID": "src/seminaire-dms/index.html#pourquoi-elasticsearch-pour-la-recherche-textuelle",
    "href": "src/seminaire-dms/index.html#pourquoi-elasticsearch-pour-la-recherche-textuelle",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Pourquoi ElasticSearch pour la recherche textuelle ?",
    "text": "Pourquoi ElasticSearch pour la recherche textuelle ?\n\n\n\n\n\n\n\n\n\nCritères\nElasticSearch\nSQL\nAddok\n\n\n\n\nRecherche de texte avancée\n✅\n❌\n✅\n\n\nPersonnalisation des recherches\n✅\n❌\n❌\n\n\nRapidité\n✅\n✅\n✅\n\n\nPrécision\n✅\n❌\n⚠️\n\n\nFacilité d’implémentation\n❌\n✅\n✅\n\n\nMaintenance\n⚠️\n✅\n❌\n\n\n\n\nDonner explication addok"
  },
  {
    "objectID": "src/seminaire-dms/index.html#filtres",
    "href": "src/seminaire-dms/index.html#filtres",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Filtres",
    "text": "Filtres\n\n\nNormaliser le texte pour la comparaison.\n\nPour les données du référentiel ET pour les adresses recherchées."
  },
  {
    "objectID": "src/seminaire-dms/index.html#filtres-implémentés",
    "href": "src/seminaire-dms/index.html#filtres-implémentés",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Filtres implémentés",
    "text": "Filtres implémentés\n\nLowercase\n\nAsciifolding\n\nPonctuation\n\nSéparation des nombres et lettres (ex : 1er → 1 er)\n\nSuppression des espaces supplémentaires\n\nSuppression des “0” devant les nombres (ex : 0033 → 33)\n\nPrise en compte des synonymes (ex : ave = avenue, st = saint)"
  },
  {
    "objectID": "src/seminaire-dms/index.html#base-de-données-classique",
    "href": "src/seminaire-dms/index.html#base-de-données-classique",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Base de données classique",
    "text": "Base de données classique\nExemple\n\n\n\nidVoie\nnom de voie\n\n\n\n\nA\ndu general leclerc\n\n\nB\ndu general charles de gaulle\n\n\nC\ndu point du jour\n\n\nD\nverdier\n\n\nE\ndes cours"
  },
  {
    "objectID": "src/seminaire-dms/index.html#recherche-par-mot",
    "href": "src/seminaire-dms/index.html#recherche-par-mot",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Recherche par mot",
    "text": "Recherche par mot\nPour chaque nom de voie du référentiel, compter le nombre de mots qui matchent 🎯 avec les mots de l’adresse recherchée.\n\nExemple : score avec tokenizer “mot” de “88 avenue du general charles de gaulle”\n\n\n\nidVoie\nnom de voie\nscore\n\n\n\n\nA\ndu general leclerc\n2\n\n\nB\ndu general charles de gaulle\n5\n\n\nC\ndu point du jour\n2\n\n\nD\nverdier\n0\n\n\nE\ndes cours\n0\n\n\n\n\n\nUn match c’est chercher si une sous chaine du nom de voie, ici un mot, est incluse dans l’adresse recherchée.\n\nRecherche par groupes de caractères également possible, abordée dans la suite."
  },
  {
    "objectID": "src/seminaire-dms/index.html#score-avec-tokenizer-mot",
    "href": "src/seminaire-dms/index.html#score-avec-tokenizer-mot",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Score avec tokenizer “mot”",
    "text": "Score avec tokenizer “mot”\nTokenizer = façon de découper le texte recherché et ciblé.\n\nPour retourner la voie la plus pertinente, on construit un score pour chaque voie : \\[\nscore_{voie} = \\sum_{\\text{∀m} \\in \\text{M}} {nb\\_occurrence}_m\n\\]\nm = mot.\nM = ensemble des mots de l’adresse recherchée.\nDans une grande base de données, c’est extrêmement long."
  },
  {
    "objectID": "src/seminaire-dms/index.html#index-inversé-mot",
    "href": "src/seminaire-dms/index.html#index-inversé-mot",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Index inversé mot",
    "text": "Index inversé mot\nExemple\n\n\n\n\n\n\nidVoie\n\n\nnom de voie\n\n\n\n\n\n\nA\n\n\ndu general leclerc\n\n\n\n\nB\n\n\ndu general charles de gaulle\n\n\n\n\nC\n\n\ndu point du jour\n\n\n\n\nD\n\n\nverdier\n\n\n\n\nE\n\n\ndes cours\n\n\n\n\n\n\n\n\n\n\n\n\nmot\n\n\noccurrences\n\n\n\n\n\n\ngeneral\n\n\n{“A”: 1, “B”: 1}\n\n\n\n\njour\n\n\n{“C”: 1}\n\n\n\n\ndu\n\n\n{“A”: 1, “B”: 1, “C”: 2}\n\n\n\n\ncours\n\n\n{“E”: 1}\n\n\n\n\n…\n\n\n…\n\n\n\n\n\nComptage direct ⚡ des occurrences de chaque mot de la base par idVoie.\n\n\nFaire un index inversé par mot, c’est récupérer tous les mots des noms de voie dans le référentiel et on les aplati dans une colonne.\n\nIl y a autant de lignes qu’il y a de mots différents dans les noms de voie du référentiel. Les mots les plus fréquents seront ceux qui ont le plus d’occurences.\n\nNous obtenons directement le comptage de chaque mot par idVoie, pour tous les mots présents dans les noms de voie du référentiel.\n\nL’index inversé est fait en amont des requetes."
  },
  {
    "objectID": "src/seminaire-dms/index.html#fuzziness",
    "href": "src/seminaire-dms/index.html#fuzziness",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Fuzziness",
    "text": "Fuzziness\nContourner les petites fautes d’orthographes : fuzziness.\nPour matcher 🎯 deux mots avec une fuzziness de niveau 1 = corriger l’un des mots :\n\nAjout d’une lettre. Ex: “verdiier”\n\nSuppression d’une lettre. Ex: “verdie”\n\nRemplacement d’une lettre. Ex: “verfier”\n\nÉchanger deux lettres de place. Ex: “evrdier”\n\nIl est possible de comparer deux textes, deux n-grams ou n’importe quel autre groupe de caractères."
  },
  {
    "objectID": "src/seminaire-dms/index.html#recherche-par-n-grams-de-caractères",
    "href": "src/seminaire-dms/index.html#recherche-par-n-grams-de-caractères",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Recherche par n-grams de caractères",
    "text": "Recherche par n-grams de caractères\nPrendre en compte les correspondances partielles : chaque mot est découpé en sous-chaînes de n caractères consécutifs.\n\nExemple de découpage en 3-grams de caractères du texte “avenue verdier” :\nave, ven, enu, nue, ver, erd, rdi, die, ier\n\nSi un mot est inférieur à la taille n, il n’aura pas de découpage en n-grams → pas présent dans l’index inversé n-gram."
  },
  {
    "objectID": "src/seminaire-dms/index.html#index-inversé-3-grams",
    "href": "src/seminaire-dms/index.html#index-inversé-3-grams",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Index inversé 3-grams",
    "text": "Index inversé 3-grams\nExemple\n\n\n\n\n\n\nidVoie\n\n\nnom de voie\n\n\n\n\n\n\nA\n\n\ndu general leclerc\n\n\n\n\nB\n\n\ndu general charles de gaulle\n\n\n\n\nC\n\n\ndu point du jour\n\n\n\n\nD\n\n\nverdier\n\n\n\n\nE\n\n\ndes cours\n\n\n\n\n\n\n\n\n\n\n\n\n3-gram\n\n\noccurrences\n\n\n\n\n\n\ngen\n\n\n{“A”: 1, “B”: 1}\n\n\n\n\ncha\n\n\n{“B”: 1}\n\n\n\n\nour\n\n\n{“C”: 1, “E”: 1}\n\n\n\n\noin\n\n\n{“C”: 1}\n\n\n\n\n…\n\n\n…\n\n\n\n\n\n\n\nIl y a autant de lignes qu’il ya de trigrams différents dans les noms de voie du référentiel.\n\nSi un mot est inférieur à la taille n=3, il ne sera pas pris en compte. Par exemple : du général de gaules, “du” et “de” n’apparaîtront pas dans l’index et donc ne seront pas pris en compte dans les matchs trigrams."
  },
  {
    "objectID": "src/seminaire-dms/index.html#score-avec-tokenizer-n-grams",
    "href": "src/seminaire-dms/index.html#score-avec-tokenizer-n-grams",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Score avec tokenizer “n-grams”",
    "text": "Score avec tokenizer “n-grams”\nScore pour chaque voie : \\[\nscore_{voie} = \\sum_{\\text{∀ngram} \\in \\text{N}} {nb\\_occurrence}_{ngram}\n\\]\nN = ensemble des n-grams de l’adresse recherchée."
  },
  {
    "objectID": "src/seminaire-dms/index.html#limites-des-n-grams",
    "href": "src/seminaire-dms/index.html#limites-des-n-grams",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Limites des n-grams",
    "text": "Limites des n-grams\n\\[\n\\downarrow \\text{taille n-grams}\n\\Rightarrow \\text{taille index inversé} \\uparrow\n\\Rightarrow \\text{temps de recherche} \\uparrow\n\\]\n\nLimitation à n∈{3,4,5} pour notre cas.\n\nTests effectués pour choisir ces valeurs, en fonction de la précision et la rapidité des requêtes."
  },
  {
    "objectID": "src/seminaire-dms/index.html#boost",
    "href": "src/seminaire-dms/index.html#boost",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Boost",
    "text": "Boost\n\nOn peut donner plus ou moins d’importance aux différents matchs 🎯.\n\nChaque occurrence est multipliée par un facteur, appelé boost, qui dépend du niveau de match 🎯."
  },
  {
    "objectID": "src/seminaire-dms/index.html#score-global",
    "href": "src/seminaire-dms/index.html#score-global",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Score global",
    "text": "Score global\nLe score global va donc combiner la somme des matchs 🎯 au niveau :\n\nmot.\n\nn-grams.\n\nfuzziness.\n\nEt booster en fonction de l’importance qu’on leur donne."
  },
  {
    "objectID": "src/seminaire-dms/index.html#faire-des-recherches",
    "href": "src/seminaire-dms/index.html#faire-des-recherches",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Faire des recherches 🔍",
    "text": "Faire des recherches 🔍\nRequête 🔍 pour retrouver la voie :\n\nMatch 🎯 nom de voie entier sans découpage avec fuzzi 1, boost 200. Ex : “3 rue du genral de gaulle” ⊃ “du general de gaulle”.\n\nMatch 🎯 chaque mot du nom de voie avec fuzzi 1, boost 15.\n\nMatch 🎯 chaque mot du type de voie avec fuzzi 1, boost 5.\n\nMatch 🎯 chaque 3 à 5-grams du nom de voie, boost 1.\n\nÀ chaque fois qu’une sous-chaîne valide l’une de ces conditions, le score va ⇡ en fonction du boost associé.\n\n\nOn match à chaque 3-grams, exemple avec verdier.\n\nLes ngrams c’est notre dernier recours, on va retourner comme voie plus pertinente les match sur nom de voie complet et sur token mais ngrams c’est notre roue de secours."
  },
  {
    "objectID": "src/seminaire-dms/index.html#retour-sur-le-score-global",
    "href": "src/seminaire-dms/index.html#retour-sur-le-score-global",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Retour sur le score global",
    "text": "Retour sur le score global\n\\[\nscore_{voie} = \\sum_{\\text{∀n} \\in \\text{N}} \\sum_{\\text{∀t} \\in \\text{n}} boost_{n}*{nb\\_occurrence}_{t}\n\\]\nN = ensemble des niveaux (niveau mot, niveau fuzzi…).\nn = niveau.\nt = token, sous-chaîne (un mot, un 3-grams…)."
  },
  {
    "objectID": "src/seminaire-dms/index.html#algorithme-didentification-dadresses-1",
    "href": "src/seminaire-dms/index.html#algorithme-didentification-dadresses-1",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Algorithme d’identification d’adresses",
    "text": "Algorithme d’identification d’adresses\n\nPrends en entrée un libellé d’adresse et un COG, ou à défaut, un code postal + libellé commune.\n\nRetourne :\n\nle(s) identifiant(s) Gaïa retrouvé(s).\n\nune indicatrice sur la qualité de l’identification (0 à 10).\n\nun ratio qui mesure l’écart entre la 1ère et la 2ème voie la plus pertinente retournées par Elastic (0 à 1)."
  },
  {
    "objectID": "src/seminaire-dms/index.html#schéma-algorithme-didentification",
    "href": "src/seminaire-dms/index.html#schéma-algorithme-didentification",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Schéma algorithme d’identification",
    "text": "Schéma algorithme d’identification\n\n\n\nEntre chaque requête Elastic, il y a des étapes de validation du résultat ES.\n\nIdentification stricte : une recherche l’adresse comme un appariement direct avec notre référentiel Gaïa, mais on applique les filtres en amont.\n\nEn moyenne, sur une base de données d’adresses non normalisées, il y a 30% des adresses qui passent à la première étape de l’identification. Cette identification stricte permet donc d’accélerer le processus, car elle prend 6 fois moins de temps que les requêtes floues sur le nom de voie.\n\nComme les bases de données qui alimentent notre référentiel sont plutôt normalisées, cela accélère d’autant plus notre processus d’identification."
  },
  {
    "objectID": "src/seminaire-dms/index.html#indicatrice-qualité",
    "href": "src/seminaire-dms/index.html#indicatrice-qualité",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Indicatrice qualité",
    "text": "Indicatrice qualité\n\nDépend du pourcentage de 3-grams de la voie du référentiel ⊂ l’adresse recherchée.\nCalcul non réalisable avec Elastic, donc effectué post requête.\n\n\n\n\nVoie qualifiée de\nPourcentage de 3-grams\n\n\n\n\nsûre\n≥ 65%\n\n\npeu douteuse\n35% ≤ x &lt; 65%\n\n\ndouteuse\n10% ≤ x &lt; 35%\n\n\nnon retrouvée\n&lt; 10%\n\n\n\nExemple : 80% des 3-grams de “verdier” dans “88 avenue verdie”.\n\n\nLe trigram “ier” n’est jamais matché\n\nverdier : 5 trigrams\n\n4 trigrams retrouvés dans 88 avenue verdier\n\n4*100/5 = 80\nCes valeurs n’ont pas été choisies aux hasard, elles ont été calculées grâce au jeu de test que nous allons vous présenter ensuite. Et nous avons regardé la courbe Précision-Rappel.\nPrécision = Vrais positifs/ positifs (vp + fp)\nRappel = Vrais positifs / Bons prédits (vp + vn)"
  },
  {
    "objectID": "src/seminaire-dms/index.html#valeurs-de-lindicatrice-qualité",
    "href": "src/seminaire-dms/index.html#valeurs-de-lindicatrice-qualité",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Valeurs de l’indicatrice qualité",
    "text": "Valeurs de l’indicatrice qualité\n\n\n\nValeur\nidGaïa maximum retrouvé\n\n\n\n\n6 à 10\nidAdresse\n\n\n3 à 5\nidVoie\n\n\n2\nidCommune\n\n\n0 à 1\nAucun"
  },
  {
    "objectID": "src/seminaire-dms/index.html#distance-entre-la-1ère-et-la-2ème-voie-la-plus-pertinente",
    "href": "src/seminaire-dms/index.html#distance-entre-la-1ère-et-la-2ème-voie-la-plus-pertinente",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Distance entre la 1ère et la 2ème voie la plus pertinente",
    "text": "Distance entre la 1ère et la 2ème voie la plus pertinente\n\\[\n\\text{ratio} = 1 - \\frac{R_2}{R_1}\n\\]\nR1 = score Elastic de la 1ère voie la plus pertinente (voie retournée).\nR2 = score Elastic de la 2ème voie la plus pertinente.\nRatio → 1 ⇔ le résultat retourné est loin de la 2ème proposition."
  },
  {
    "objectID": "src/seminaire-dms/index.html#constitution-dun-jeu-de-test",
    "href": "src/seminaire-dms/index.html#constitution-dun-jeu-de-test",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Constitution d’un jeu de test",
    "text": "Constitution d’un jeu de test\n\nIdée : avoir des adresses avec des variations textuelles et leur idGaïaAdresse associé (vérité).\n\nLe jeu de test est une suite d’appariements de sources de données :\n\nPASRAU : Prélèvement À la Source sur les Revenus AUtres.\n\nTSSAL : Base tous salariés, issue de la déclaration sociale nominative.\n\nFidéli : FIchiers DÉmographiques sur les Logements et les Individus.\n\n\nValidation post-appariements des paires adresse non normalisée + idGaïaAdresse."
  },
  {
    "objectID": "src/seminaire-dms/index.html#schéma-appariements-jeu-de-test",
    "href": "src/seminaire-dms/index.html#schéma-appariements-jeu-de-test",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Schéma appariements jeu de test",
    "text": "Schéma appariements jeu de test\n\n\n\nPASRAU : Ce sont des données administratives générées par le prélèvement à la source sur les retraites et d’autres revenus (mais pas les salaires).\nAdresses du PASRAU et Tous Salariés (TTSAL) avec le CSNS de l’individu connu pour chaque adresse.\n\nGrâce aux CSNS des individus Fidéli 2022, obtention de l’identifiant Majic de ces adresses.\nAvec l’identifiant Majic des adresses, conservé dans le référentiel Gaïa, on retrouve l’idGaïaAdresse.\n\nLes adresses (PASRAU, TSSAL) sont comparées aux adresses du référentiel, et seules les paires considérées comme identiques sont conservées."
  },
  {
    "objectID": "src/seminaire-dms/index.html#évaluation-de-lalgorithme-didentification",
    "href": "src/seminaire-dms/index.html#évaluation-de-lalgorithme-didentification",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Évaluation de l’algorithme d’identification",
    "text": "Évaluation de l’algorithme d’identification\nPour 100 000 adresses issues du jeu de test sur tout le territoire français :\n\n\n\n\n\n\n\n\n\n\nAdresse trouvée\nVoie trouvée\nCommune trouvée/rien trouvé\n\n\n\n\nPourcentage\n86,0%\n99,5%\n0,5%\n\n\nPrécision\n0.94\n0.94\nx\n\n\n\nAppariement direct avec filtres entre adresses à retrouver et référentiel Gaïa : 30% d’identification à l’adresse.\n\n\nPrécision = Vrais positifs/ positifs (vp + fp)\nA titre de comparaison, un appariement direct entre les adresses à retrouver et le référentiel Gaïa donnerait 30% d’identification à condition que les filtres présentés précédemment soient appliqués."
  },
  {
    "objectID": "src/seminaire-dms/index.html#rapidité-de-lalgorithme",
    "href": "src/seminaire-dms/index.html#rapidité-de-lalgorithme",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Rapidité de l’algorithme",
    "text": "Rapidité de l’algorithme\n\n500 adresses en 2 secondes.\n\nIdentification de gros paquets d’adresses : 1 million d’adresses en 50 minutes."
  },
  {
    "objectID": "src/seminaire-dms/index.html#limites",
    "href": "src/seminaire-dms/index.html#limites",
    "title": "Identification d’adresses avec ElasticSearch",
    "section": "Limites",
    "text": "Limites\n\nCompétences requises pour le développement et la maintenance du moteur ElasticSearch.\n\nMoteur créé par l’EPS en Python, réécrit en Java par l’EPI.\n\nLes travaux ont été effectués sur un référentiel contenant des erreurs/doublons → entrave les métriques qualité."
  }
]