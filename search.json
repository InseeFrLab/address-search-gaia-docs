[
  {
    "objectID": "src/seminaire-dms/index.html#origine-du-projet",
    "href": "src/seminaire-dms/index.html#origine-du-projet",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Origine du projet",
    "text": "Origine du projet\nGaïa : Référentiel Géographique d’Adresses avec Informations Géolocalisantes. \n\nBesoin d’un référentiel complet, stable, fiable, mis à jour.\nFaciliter la gestion des adresses au sein du SSP.\nClients : Résil, Géoloc, DMTR…"
  },
  {
    "objectID": "src/seminaire-dms/index.html#une-adresse",
    "href": "src/seminaire-dms/index.html#une-adresse",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Une adresse",
    "text": "Une adresse\n\n\nnuméro type de voie COG\n\n\n\n\n\n\n20 bis avenue de la marne 92046\n\n\n\n\n\n\nindice de répétition nom de voie"
  },
  {
    "objectID": "src/seminaire-dms/index.html#le-référentiel-gaïa",
    "href": "src/seminaire-dms/index.html#le-référentiel-gaïa",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Le référentiel Gaïa",
    "text": "Le référentiel Gaïa\n\n\nAutres données disponibles (aspect géométrique des objets) :\n\nPour chaque adresse Gaïa : point gps, lien parcelle.\n\nPour chaque commune Gaïa : polygone."
  },
  {
    "objectID": "src/seminaire-dms/index.html#identifiants-gaïa",
    "href": "src/seminaire-dms/index.html#identifiants-gaïa",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Identifiants Gaïa",
    "text": "Identifiants Gaïa\nIdentifiant unique et stable pour assurer le suivi des objets dans le temps.\n\nTrois niveaux :\n\nIdentifiant adresse\nIdentifiant voie\nIdentifiant commune"
  },
  {
    "objectID": "src/seminaire-dms/index.html#construction-du-référentiel",
    "href": "src/seminaire-dms/index.html#construction-du-référentiel",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Construction du référentiel",
    "text": "Construction du référentiel\nSources fiables :\n\nMajic\nBAN\nRCA\n\nAu moins une mise à jour par mois (avec conservation des identifiants Gaïa).\n\nUne mise à jour :\n\nRécupérer la nouvelle base d’une source données.\n\nIdentifier les adresses textuellement :\n\n\n\nLes adresses qui sont retrouvées sont alors modifiées si des nouveautés apparaissent.\n\nLes adresses non retrouvées entraînent la création de nouveaux objets Gaïa.\nL’étape d’identification des adresses permet de ne pas écraser les identifiants Gaïa."
  },
  {
    "objectID": "src/seminaire-dms/index.html#dautres-données",
    "href": "src/seminaire-dms/index.html#dautres-données",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "D’autres données",
    "text": "D’autres données\n\nPolygones du bâti\nPolygones Parcelles du cadastre\nLiens code postaux - libellés commune - COG\nPolygones QPV\n\nPas d’identifiant Gaïa, donc pas de suivi dans le temps de ces objets."
  },
  {
    "objectID": "src/seminaire-dms/index.html#quelques-métriques-sur-le-référentiel",
    "href": "src/seminaire-dms/index.html#quelques-métriques-sur-le-référentiel",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Quelques métriques sur le référentiel",
    "text": "Quelques métriques sur le référentiel\n\nNombre d’adresses ≃ 27 millions.\n\nNombre de voies ≃ 3 millions."
  },
  {
    "objectID": "src/seminaire-dms/index.html#différents-besoins-au-sein-du-ssp",
    "href": "src/seminaire-dms/index.html#différents-besoins-au-sein-du-ssp",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Différents besoins au sein du SSP",
    "text": "Différents besoins au sein du SSP\n\nRésil : identifier le(s) adresse(s) des individus pour sélectionner la plus récente.\n\nGéoloc : identification du référentiel Géoloc et génération de leur nouveau référentiel.\n\nAutres utilisateurs possibles :\n\nIdentification des adresses sur les certificats de décès.\n\nIdentification des adresses de Sirus."
  },
  {
    "objectID": "src/seminaire-dms/index.html#regroupements-dadresses",
    "href": "src/seminaire-dms/index.html#regroupements-dadresses",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Regroupements d’adresses",
    "text": "Regroupements d’adresses\nNouvel objet géographique : le lieu géographique \n\nUtilisation : Regrouper les adresses avec différents identifiants Gaïa mais qui représentent le même lieu.\n\nExemple : plusieurs adresses pour une même maison si elle a différentes entrées → même lieu géographique."
  },
  {
    "objectID": "src/seminaire-dms/index.html#besoin-didentification-des-adresses-textuelles",
    "href": "src/seminaire-dms/index.html#besoin-didentification-des-adresses-textuelles",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Besoin d’identification des adresses textuelles",
    "text": "Besoin d’identification des adresses textuelles\nTrouver l’identifiant d’adresse à partir d’un libellé d’adresse plus ou moins correcte.\n\nBesoin récurrent au sein du SSP.\nIndispensable pour construire et mettre à jour le référentiel.\n\nIl faut donc un moteur de recherche ⚙️."
  },
  {
    "objectID": "src/seminaire-dms/index.html#cest-quoi-elasticsearch",
    "href": "src/seminaire-dms/index.html#cest-quoi-elasticsearch",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "C’est quoi ElasticSearch ?",
    "text": "C’est quoi ElasticSearch ?\n\nElasticSearch : logiciel pour l’indexation et la recherche de données.\nUtilisation en pratique avec Python : packages elasticsearch et elasticsearch-dsl."
  },
  {
    "objectID": "src/seminaire-dms/index.html#pourquoi-elasticsearch-pour-la-recherche-textuelle",
    "href": "src/seminaire-dms/index.html#pourquoi-elasticsearch-pour-la-recherche-textuelle",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Pourquoi ElasticSearch pour la recherche textuelle ?",
    "text": "Pourquoi ElasticSearch pour la recherche textuelle ?\n\n\n\n\n\n\n\n\n\nCritères\nElasticSearch\nSQL\nAddok\n\n\n\n\nRecherche de texte avancée\n✅\n❌\n✅\n\n\nRapidité\n✅\n✅\n⚠️\n\n\nPrécision\n✅\n❌\n⚠️\n\n\nPersonnalisation des recherches\n✅\n❌\n❌\n\n\nFacilité d’implémentation\n❌\n✅\n✅\n\n\nRessources\n❌\n✅\n✅\n\n\nMaintenance\n⚠️\n✅\n❌\n\n\n\n\nDonner explication addok"
  },
  {
    "objectID": "src/seminaire-dms/index.html#outils-pour-créer-un-moteur-elasticsearch",
    "href": "src/seminaire-dms/index.html#outils-pour-créer-un-moteur-elasticsearch",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Outils pour créer un moteur ElasticSearch",
    "text": "Outils pour créer un moteur ElasticSearch\n\nMappings 🏷️ : spécifier les traitements à appliquer pour chaque variable.\nSettings 🛠️ : définir les différents traitements.\nRequêtes 🔍 : recherche sur les variables définies dans les mappings.\n\n\nEt éventuellement, savoir coder en Python/Java…\n\nOn peut commencer à créer notre moteur ⚙️."
  },
  {
    "objectID": "src/seminaire-dms/index.html#filtres",
    "href": "src/seminaire-dms/index.html#filtres",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Filtres",
    "text": "Filtres\n\nDéfinis dans les settings 🛠️.\n\nNormalisent les données.\n\nPour les données du référentiel et pour les adresses recherchées."
  },
  {
    "objectID": "src/seminaire-dms/index.html#filtres-implémentés",
    "href": "src/seminaire-dms/index.html#filtres-implémentés",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Filtres implémentés",
    "text": "Filtres implémentés\n\nLowercase\n\nAsciifolding\n\nPonctuation\n\nSéparation des nombres et lettres (ex : 14bis → 14 bis)\n\nSuppression des espaces supplémentaires\n\nDillatation des accronymes/prise en compte des synonymes"
  },
  {
    "objectID": "src/seminaire-dms/index.html#base-de-données-classique",
    "href": "src/seminaire-dms/index.html#base-de-données-classique",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Base de données classique",
    "text": "Base de données classique\nExemple\n\n\n\nidVoie\nnom de voie\n\n\n\n\nA\ndu general leclerc\n\n\nB\ndu general charles de gaulle\n\n\nC\ndu point du jour\n\n\nD\nverdier\n\n\nE\ndes cours"
  },
  {
    "objectID": "src/seminaire-dms/index.html#recherche-par-token",
    "href": "src/seminaire-dms/index.html#recherche-par-token",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Recherche par token",
    "text": "Recherche par token\n\nTokenizer : “token”.\nUn token = un mot.\n\nPour chaque nom de voie du référentiel, compter le nombre de tokens qui matchent 🎯 avec les tokens de l’adresse recherchée."
  },
  {
    "objectID": "src/seminaire-dms/index.html#score-avec-tokenizer-token",
    "href": "src/seminaire-dms/index.html#score-avec-tokenizer-token",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Score avec tokenizer “token”",
    "text": "Score avec tokenizer “token”\nPour retourner la voie la plus pertinente, on construit un score pour chaque voie : \\[\nscore_{voie} = \\sum_{\\text{∀t} \\in \\text{T}} {nb\\_occurrence}_t\n\\]\nt = token\nT = ensemble des tokens de l’adresse recherchée"
  },
  {
    "objectID": "src/seminaire-dms/index.html#score-avec-tokenizer-token-1",
    "href": "src/seminaire-dms/index.html#score-avec-tokenizer-token-1",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Score avec tokenizer “token”",
    "text": "Score avec tokenizer “token”\nExemple : score avec tokenizer “token” de “88 avenue du general charles de gaulle”\n\n\n\nidVoie\nnom de voie\nscore\n\n\n\n\nA\ndu general leclerc\n2\n\n\nB\ndu general charles de gaulle\n5\n\n\nC\ndu point du jour\n2\n\n\nD\nverdier\n0\n\n\nE\ndes cours\n0\n\n\n\nDans une grande base de données, c’est extrêmement long."
  },
  {
    "objectID": "src/seminaire-dms/index.html#index-inversé-token",
    "href": "src/seminaire-dms/index.html#index-inversé-token",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Index inversé token",
    "text": "Index inversé token\nExemple\n\n\n\n\n\n\nidVoie\n\n\nnom de voie\n\n\n\n\n\n\nA\n\n\ndu general leclerc\n\n\n\n\nB\n\n\ndu general charles de gaulle\n\n\n\n\nC\n\n\ndu point du jour\n\n\n\n\nD\n\n\nverdier\n\n\n\n\nE\n\n\ndes cours\n\n\n\n\n\n\n\n\n\n\n\n\ntoken\n\n\noccurrences\n\n\n\n\n\n\ngeneral\n\n\n{“A”: 1, “B”: 1}\n\n\n\n\njour\n\n\n{“C”: 1}\n\n\n\n\ndu\n\n\n{“A”: 1, “B”: 1, “C”: 2}\n\n\n\n\ncours\n\n\n{“E”: 1}\n\n\n\n\n…\n\n\n…\n\n\n\n\n\nComptage direct ⚡ des occurrences de chaque token de la base par idVoie.\n\nFaire un index inversé par token, c’est récupérer tous les tokens des noms de voie dans le référentiel et on les applati dans une colonne.\nNous obtenons directement le comptage de chaque token par idVoie, pour tous les tokens présents dans les noms de voie du référentiel."
  },
  {
    "objectID": "src/seminaire-dms/index.html#recherche-par-n-grams-de-caractères",
    "href": "src/seminaire-dms/index.html#recherche-par-n-grams-de-caractères",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Recherche par n-grams de caractères",
    "text": "Recherche par n-grams de caractères\nContourner les fautes d’orthographes : chaque token est découpé en sous-chaînes de n caractères consécutifs.\nExemple de découpage en 3-grams de caractères du texte “avenue verdier” :\nave, ven, enu, nue, ver, erd, rdi, die, ier"
  },
  {
    "objectID": "src/seminaire-dms/index.html#index-inversé-3-grams",
    "href": "src/seminaire-dms/index.html#index-inversé-3-grams",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Index inversé 3-grams",
    "text": "Index inversé 3-grams\nExemple\n\n\n\n\n\n\nidVoie\n\n\nnom de voie\n\n\n\n\n\n\nA\n\n\ndu general leclerc\n\n\n\n\nB\n\n\ndu general charles de gaulle\n\n\n\n\nC\n\n\ndu point du jour\n\n\n\n\nD\n\n\nverdier\n\n\n\n\nE\n\n\ndes cours\n\n\n\n\n\n\n\n\n\n\n\n\n3-gram\n\n\noccurrences\n\n\n\n\n\n\ngen\n\n\n{“A”: 1, “B”: 1}\n\n\n\n\nchar\n\n\n{“B”: 1}\n\n\n\n\nour\n\n\n{“C”: 1, “E”: 1}\n\n\n\n\noin\n\n\n{“C”: 1}\n\n\n\n\n…\n\n\n…"
  },
  {
    "objectID": "src/seminaire-dms/index.html#score-avec-tokenizer-n-grams",
    "href": "src/seminaire-dms/index.html#score-avec-tokenizer-n-grams",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Score avec tokenizer “n-grams”",
    "text": "Score avec tokenizer “n-grams”\nScore pour chaque voie : \\[\nscore_{voie} = \\sum_{\\text{∀ngram} \\in \\text{N}} {nb\\_occurrence}_{ngram}\n\\]\nN = ensemble des n-grams de l’adresse recherchée"
  },
  {
    "objectID": "src/seminaire-dms/index.html#limites-des-n-grams",
    "href": "src/seminaire-dms/index.html#limites-des-n-grams",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Limites des n-grams",
    "text": "Limites des n-grams\n\\[\n\\downarrow \\text{taille n-grams}\n\\Rightarrow \\text{taille index inversé} \\uparrow\n\\Rightarrow \\text{temps de recherche} \\uparrow\n\\]\nLimitation à minimum n∈{3,4,5} pour notre cas."
  },
  {
    "objectID": "src/seminaire-dms/index.html#fuzziness",
    "href": "src/seminaire-dms/index.html#fuzziness",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Fuzziness",
    "text": "Fuzziness\nContourner les fautes d’orthographes d’une autre façon : fuzziness.\n\nPour matcher 🎯 deux tokens avec une fuzziness de niveau 1 = corriger l’un des tokens :\n\nAjout d’une lettre.\n\nSuppression d’une lettre.\n\nRemplacement d’une lettre.\n\nÉchanger deux lettres de place."
  },
  {
    "objectID": "src/seminaire-dms/index.html#score-global",
    "href": "src/seminaire-dms/index.html#score-global",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Score global",
    "text": "Score global\nLe score global va donc combiner la somme des matchs 🎯 au niveau :\n\ntoken.\n\nn-grams.\n\nfuzziness."
  },
  {
    "objectID": "src/seminaire-dms/index.html#boost",
    "href": "src/seminaire-dms/index.html#boost",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Boost",
    "text": "Boost\nOn peut donner plus ou moins d’importance aux différents matchs 🎯.\nChaque occurrence est multipliée par un facteur, appelé boost, qui dépend du niveau de match 🎯.\nBoosts actuels :\n\n\n\nmatch au niveau\nboost\nexemple\n\n\n\n\ntoken\n20\n“verdier” avec “verdier”\n\n\nfuzzi 1\n15\n“verdier” avec “verdie”\n\n\n3-grams\n1\n“ver” avec “ver”\n\n\n4-ngrams\n1\n“erdi” avec “erdi”\n\n\n5-grams\n1\n“verdi” avec “verdi”\n\n\n\nExemple : recherche de “88 avenue verdier” et dans la base il y a la voie D : “verdier”."
  },
  {
    "objectID": "src/seminaire-dms/index.html#retour-sur-le-score-global",
    "href": "src/seminaire-dms/index.html#retour-sur-le-score-global",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Retour sur le score global",
    "text": "Retour sur le score global\n\\[\nscore_{voie} = \\sum_{\\text{∀n} \\in \\text{N}} \\sum_{\\text{∀sc} \\in \\text{n}} boost_{n}*{nb\\_occurrence}_{sc}\n\\]\nN = ensemble des niveaux (niveau token, niveau fuzzi…)\nn = niveau\nsc = sous-chaîne (un token, un 3-grams…)"
  },
  {
    "objectID": "src/seminaire-dms/index.html#configurer-le-moteur",
    "href": "src/seminaire-dms/index.html#configurer-le-moteur",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Configurer le moteur ⚙️",
    "text": "Configurer le moteur ⚙️\nUne fois qu’on a la théorie, il faut l’appliquer en pratique.\nLe package elasticsearch permet d’indexer les données en fournissant :\n\nUn dataframe 📋 des données du référentiel Gaïa.\n\nDes settings 🛠️ où on définit nos différents analyzers, englobant les filtres et le tokenizer.\n\nDes mappings 🏷️ où pour chaque variable, on fournit un analyzer."
  },
  {
    "objectID": "src/seminaire-dms/index.html#faire-des-recherches",
    "href": "src/seminaire-dms/index.html#faire-des-recherches",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Faire des recherches",
    "text": "Faire des recherches\nUne fois le moteur configuré, on peut faire des requêtes 🔍.\nRequête pour retrouver la voie :\n\nMatch 🎯 token sur nom de voie avec fuzzi 1 → boost 20.\n\nMatch 🎯 token sur type de voie ou nom de voie → boost 15.\n\nMatch 🎯 3 à 5-grams sur nom de voie → boost 1.\n\n\\[\n\\text{À chaque fois qu'une sous-chaîne valide l'une de ces conditions, le score va} \\uparrow \\text{en fonction du boost associé}.  \n\\]"
  },
  {
    "objectID": "src/seminaire-dms/index.html#algorithme-didentification-dadresses-1",
    "href": "src/seminaire-dms/index.html#algorithme-didentification-dadresses-1",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Algorithme d’identification d’adresses",
    "text": "Algorithme d’identification d’adresses\n\n\n\nSuccession de requêtes ElasticSearch.\nÉtapes de validation des résultats après chaque requête.\nRetourne :\n\nle(s) identifiant(s) Gaïa retrouvés.\n\nune indicatrice sur qualité de l’identification.\n\nun ratio qui mesure l’écart entre la 1ère et la 2ème possibilité retournées par Elastic."
  },
  {
    "objectID": "src/seminaire-dms/index.html#indicatrice-qualité",
    "href": "src/seminaire-dms/index.html#indicatrice-qualité",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Indicatrice qualité",
    "text": "Indicatrice qualité\n\nDépend du pourcentage de 3-grams de la voie du référentiel contenus dans l’adresse recherchée.\nCalcul non réalisable avec Elastic, donc effectué post requête.\n\n\n\n\nVoie qualifiée de\nPourcentage de 3-grams\n\n\n\n\nsûre\n≥ 65%\n\n\npeu douteuse\n35% ≤ x &lt; 65%\n\n\ndouteuse\n10% ≤ x &lt; 35%\n\n\nnon retrouvée\n&lt; 10%\n\n\n\nExemple : 80% des 3-grams de “verdier” dans “88 avenue verdie”.\n\n\nLe trigram “ier” n’est jamais matché\n\nverdier : 5 trigrams\n\n4 trigrams retrouvés dans 88 avenue verdier\n\n4*100/5 = 80"
  },
  {
    "objectID": "src/seminaire-dms/index.html#valeurs-de-lindicatrice-qualité",
    "href": "src/seminaire-dms/index.html#valeurs-de-lindicatrice-qualité",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Valeurs de l’indicatrice qualité",
    "text": "Valeurs de l’indicatrice qualité\n\n\n\nValeur\nidGaïa maximum retrouvé\n\n\n\n\n6 à 10\nidAdresse\n\n\n3 à 5\nidVoie\n\n\n2\nidCommune\n\n\n0 à 1\nAucun"
  },
  {
    "objectID": "src/seminaire-dms/index.html#distance-entre-la-1ère-et-la-2ème-voie-la-plus-pertinente",
    "href": "src/seminaire-dms/index.html#distance-entre-la-1ère-et-la-2ème-voie-la-plus-pertinente",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Distance entre la 1ère et la 2ème voie la plus pertinente",
    "text": "Distance entre la 1ère et la 2ème voie la plus pertinente\n\\[\n\\text{ratio} = 1 - \\frac{R_2}{R_1}\n\\]\nR1 = score Elastic de la 1ère voie la plus pertinente\nR2 = score Elastic de la 2ème voie la plus pertinente\nPlus le ratio est proche de 1, plus le résultat retourné est loin de la 2ème proposition."
  },
  {
    "objectID": "src/seminaire-dms/index.html#evaluation-de-lalgorithme-didentification",
    "href": "src/seminaire-dms/index.html#evaluation-de-lalgorithme-didentification",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Evaluation de l’algorithme d’identification",
    "text": "Evaluation de l’algorithme d’identification\nJeu de test d’adresses pasrau x resil x majic x gaia\nSur 100 000 adresses sur tout le territoire : - Accuracy : … - …"
  },
  {
    "objectID": "src/seminaire-dms/index.html#rapidité-de-lalgorithme",
    "href": "src/seminaire-dms/index.html#rapidité-de-lalgorithme",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Rapidité de l’algorithme",
    "text": "Rapidité de l’algorithme\nXXX secondes pour XXX adresses\nDémonstration en utilisant l’API Gaïa : url."
  },
  {
    "objectID": "src/seminaire-dms/index.html#pistes-damélioration",
    "href": "src/seminaire-dms/index.html#pistes-damélioration",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Pistes d’amélioration",
    "text": "Pistes d’amélioration"
  },
  {
    "objectID": "src/seminaire-dms/index.html#merci-au-ssplab-julien-pramil-lino-galiana-olivier-meslin-marie-pierre-joubert-et-tom-seimandi",
    "href": "src/seminaire-dms/index.html#merci-au-ssplab-julien-pramil-lino-galiana-olivier-meslin-marie-pierre-joubert-et-tom-seimandi",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Merci au SSPlab : Julien Pramil, Lino Galiana, Olivier Meslin, Marie-Pierre Joubert et Tom Seimandi",
    "text": "Merci au SSPlab : Julien Pramil, Lino Galiana, Olivier Meslin, Marie-Pierre Joubert et Tom Seimandi"
  },
  {
    "objectID": "src/seminaire-dms/index.html#merci-à-heidi-koumarianos",
    "href": "src/seminaire-dms/index.html#merci-à-heidi-koumarianos",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Merci à Heidi Koumarianos",
    "text": "Merci à Heidi Koumarianos"
  },
  {
    "objectID": "src/seminaire-dms/index.html#et-enfin-merci-pour-votre-attention",
    "href": "src/seminaire-dms/index.html#et-enfin-merci-pour-votre-attention",
    "title": "Séminaire interne DMS Moteur de recherche d’adresses avec ElasticSearch pour le projet Gaïa",
    "section": "Et enfin, merci pour votre attention !",
    "text": "Et enfin, merci pour votre attention !"
  },
  {
    "objectID": "src/documentation/elasticsearch.html",
    "href": "src/documentation/elasticsearch.html",
    "title": "Identification d’adresse",
    "section": "",
    "text": "L’objectif est de founir un service qui prend une adresse en entrée (couple string adresse/string code insee), et renvoie un identifiant Gaïa le plus précis possible et des informations sur la qualité de l’identification. Il y a 3 niveaux d’identifiants Gaïa :\n- IdGaïaAdresse (le plus précis)\n- IdGaïaVoie (lorsque le numéro n’est pas retrouvé, mais que la voie si)\n- idGaïaCommune (lorsque ni l’adresse, ni la voie ne sont identifiées)\nExemple : {“adresseComplete”: “131 rue du faubourg bannier”, “depcom”: “45324”}.\nLe depcom est le Code Officiel Géographique de la commune.\n\n\n\nSchéma algorithme d’identification d’adresse avec ElasticSearch\n\n\n\n\nIl existe deux indices : adresses contenant toutes les adresses fraçaises et voies contenant toutes les voies fraçaises.\nExemple : une adresse est “20 rue hoche” et une voie est “rue hoche”.\nLa première étape est la recherche stricte de l’adresse recherchée dans l’index adresses sur les adresses de la commune uniquement.\nSi aucun IdGaïaAdresse ne ressort à l’issue de l’étape 1, alors :\n- Recherche floue dans l’index voies sur les adresses de la commune uniquement, pour retrouver l’IdGaïaVoie (étape 2).\n- Recherche dans l’index adresses sur les adresses de la voie trouvée à l’étape 1 uniquement, pour retrouver l’idGaïaAdresse (étape 3).\nLa qualité globale de l’appariement est appréciée au travers de deux indicateurs : un code retour qui donne, sur une échelle de 0 à 10, une vision globale sur le retour de l’algorithme et un score relatif pour repérer d’éventuelles concurrences entre réponses de qualité proche.\n\n\nL’information principale est fournie par un code retour, qui vise à indiquer les éléments qui ont été identifiés dans le processus d’appariement.\nL’algorithme recherche d’abord la commune indiquée (pour l’instant cette étape n’est pas faite avec ElasticSearch), puis la voie au sein de la commune et enfin l’adresse dans la voie, c’est-à-dire l’existence du numéro et de l’indice de répétition dans les adresses de la voie.\nLa voie retrouvée est typée selon quatre catégories, en fonction du nombre de trigrammes retrouvés :\n\nvoie sûre : l’adresse contient plus de 65 % des trigrammes de la voie du référentiel\n\nvoie peu douteuse : l’adresse contient entre 35 % et 65 % des trigrammes de la voie du référentiel\n\nvoie douteuse : l’adresse contient entre 10 % et 35 % des trigrammes de la voie du référentiel\n\nvoie non retrouvée : pas d’écho ou l’adresse contient moins de 10 % des trigrammes de la voie du référentiel\n\nEn ce qui concerne les adresses, les contrôles portent sur le numéro et l’indice de répétition :\n\nSi l’adresse demandée ne contient pas d’indice de répétition et que le numéro est trouvé, alors l’adresse est sûre.\n\nSi l’adresse demandée contient un indice de répétition et s’il est retrouvé, l’adresse est sûre.\n\nSi l’adresse demandée contient un indice de répétition mais qu’il n’est pas retrouvé, alors l’adresse est douteuse.\n\nSi le numéro n’est pas retrouvé exactement, aucune adresse n’est retournée.\n\nSi une voie est douteuse, alors la qualité de l’adresse globale est douteuse : on ne distingue donc pas les cas où l’adresse est sûre et douteuse.\n\n\n\n\n\n\n\n\n\nAdresse\nVoie\nCode_retour\nLibellé\n\n\n\n\nsûre\nsûre\n10\nAppariement direct sur l’adresse\n\n\nsûre\nsûre\n9\nAdresse sûre\n\n\ndouteuse\nsûre\n8\nAdresse douteuse dans voie sûre\n\n\nsûre & douteuse\ndouteuse\n7\nAdresse dans voie douteuse\n\n\nsûre & douteuse\ntrès douteuse\n6\nAdresse dans voie très douteuse\n\n\npas d’adresse trouvée\nsûre\n5\nVoie sûre sans adresse\n\n\npas d’adresse trouvée\ndouteuse\n4\nVoie douteuse sans adresse\n\n\npas d’adresse trouvée\ntrès douteuse\n3\nVoie très douteuse sans adresse\n\n\npas d’adresse trouvée\npas de voie trouvée\n2\nCommune seulement\n\n\npas d’adresse trouvée\npas de voie trouvée\n1\nAdresse à l’étranger\n\n\npas d’adresse trouvée\npas de voie trouvée\n0\nProblème dans les données (par exemple, commune non trouvée)\n\n\n\n\n\n\nL’objectif de cette information complémentaire est d’indiquer la position de l’écho retourné par rapport aux autres échos possibles dans l’index voies, lors de la requête à l’étape 2. Il permet d’évaluer si le score Elastic du premier écho (noté R1) est bien supérieur au score du second (noté R2).\nLa formule du ratio est 1-(R2/R1) ; si le score est supérieur à 0,9999, il est ramené à 0,9999.\nSi la valeur est proche de 1, alors le premier écho se détache nettement des autres et donc la recherche est sans ambiguïté. A l’inverse, si la valeur est proche de 0, alors le premier et le second écho ont le même score et la recherche aurait donc pu retourner un autre résultat.\nLe score relatif est compris entre 0 et 1 et donné avec 4 décimales. Le score maximal est de 0,9999, afin de pouvoir être utilisé en combinaison avec le code retour.\n\n\n\n\nLa logique globale de l’algorithme est la suivante :\n\nOn va enchaîner des étapes de contrôles, d’interrogation d’ElasticSearch, de règles de décision.\n\nA chaque étape, il est possible d’attribuer un code retour “sortant” à l’adresse qu’on souhaite identifier. Par exemple, si l’adresse est vide, on attribue un code retour 0 et l’adresse ne va pas plus loin dans l’algorithme.\n\nSi l’adresse n’a pas de code retour attribué, alors on continue dans l’algorithme.\n\nComme précisé plus haut, l’algorithme marche en 4 étapes d’identification: commune —&gt; adresse exacte –si pas de match-&gt; voie —&gt; adresse\n\n\nLes données du client et dans l’index sont traitées de la même façon pour maximiser les matchs :\n- Lowercase\n- Asciifolding\n- Traitement de la ponctuation\n- Utilisation de listes de synonymes\n\n\n\nL’identification à la commune se fait à travers un dictionnaire, pour récupérer l’idGaïaCommune et passer à l’étape suivante.\n\n\n\nAfin d’accélerer notre procédure d’identification, une requête simple et rapide nous permet d’identifier une adresse si son orthographe est parfaite. Cette requête consiste à rechercher au sein des adresses de la commune identifiée à l’étape précédente grâce à un filter sur l’idGaïaCommune, les adresses dont la variable adresseComplete (string représentant l’adresse contenant le numéro, l’indice de répétition, le type et le nom de voie) correspond parfaitement au string envoyé par le client. Ceci est assuré par le caractère stricte de la requête must, accompagné d’un minimum_should_match=100%.\nPour gagner encore plus de temps, la variable adresseComplete ainsi que le string client ne sont pas découpés en token, comme dans les réglages par défaut d’ElasticSearch (le minimum should match est un seuil sur le nombre ou la proportion de bouts matchés entre le résultats de l’index et la demande du client, et un bout peut être le string complet, tout comme un token ou un ngram). Alors, le moteur va retourner l’adresse qui est parfaitement incluse dans le string envoyé.\nEn présence d’un résultat à cette requête, le premier echo est conservé avec un code retour 10 et l’algorithme d’identification se termine à cette étape.\n\n\n\nLa requête pour identifier à la voie est plus complexe car elle inclut la possibilité d’avoir du flou dans l’adresse à rechercher.\nPour faciliter la recherche, un filtre est appliqué pour ne requêter que les voies dans la commune identifiée à l’étape 0.\nC’est une succession de should où au moins l’un d’entre eux doit être validé pour que la voie soit renvoyée :\n- Le nom de voie dans l’index non tokenisé est matché avec une fuzziness de 1 (boost : 200)\n- Le type de voie et/ou le nom de voie du référentiel sont inclus dans l’adresse client avec une fuzziness de 1 (boosts respectifs : 5 et 15)\n- Au moins un ngram du nom de voie de l’index, de taille 3 à 5, correspond (boost par ngram : 1)\nEnsuite, une multitude de vérifications sont appliquées sur le premier echo (s’il existe), qui va déterminer si la voie est sûre, peu douteuse, douteuse ou non retrouvée (citées plus haut).\nS’il n’y a pas de retour ElasticSearch ou si la voie est jugée comme non retrouvée d’après les règles, un code retour 2 sera affiché.\n\n\n\nPour retrouver l’adresse à partir de la voie, nous allons chercher dans les adresses de la voie identifiée à l’étape 2 (avec un filter sur idGaïaVoie) et demander à matcher sur les champs numéro et/ou indice de répétition dans notre base.\nDes regex ont été développées pour extraire le numéro de l’adresse dans le string client et qui détecte la présence d’indice de répétition dans celle-ci. Ensuite, un must est appliqué sur le champ numéro avec l’extraction du numéro. Si l’extraction ne retourne rien, le numéro recherché par le must sera alors “0”. L’indice de répétition sera recherché avec un should.\nSi le moteur retourne plusieurs adresses, l’adresse retournée sera :\n- celle qui a un indice de répétition si un indice a été détecté dans l’adresse recherchée\n- celle qui n’a pas d’indice de répétition si aucun indice n’a été détecté dans l’adresse recherchée\nDans le cas où un idGaïaAdresse est trouvé, il sera accompagné d’un code retour 7, 8 ou 9.\nFinalement, dans le cas où aucune adresse ne ressort, alors un code retour 3, 4 ou 5 sera attribué en fonction de la fiabilité de la voie identifiée.",
    "crumbs": [
      "Accueil",
      "Navigation",
      "Identification d'adresse avec ElasticSearch"
    ]
  },
  {
    "objectID": "src/documentation/elasticsearch.html#fonctionnement-de-lidentification",
    "href": "src/documentation/elasticsearch.html#fonctionnement-de-lidentification",
    "title": "Identification d’adresse",
    "section": "",
    "text": "Il existe deux indices : adresses contenant toutes les adresses fraçaises et voies contenant toutes les voies fraçaises.\nExemple : une adresse est “20 rue hoche” et une voie est “rue hoche”.\nLa première étape est la recherche stricte de l’adresse recherchée dans l’index adresses sur les adresses de la commune uniquement.\nSi aucun IdGaïaAdresse ne ressort à l’issue de l’étape 1, alors :\n- Recherche floue dans l’index voies sur les adresses de la commune uniquement, pour retrouver l’IdGaïaVoie (étape 2).\n- Recherche dans l’index adresses sur les adresses de la voie trouvée à l’étape 1 uniquement, pour retrouver l’idGaïaAdresse (étape 3).\nLa qualité globale de l’appariement est appréciée au travers de deux indicateurs : un code retour qui donne, sur une échelle de 0 à 10, une vision globale sur le retour de l’algorithme et un score relatif pour repérer d’éventuelles concurrences entre réponses de qualité proche.\n\n\nL’information principale est fournie par un code retour, qui vise à indiquer les éléments qui ont été identifiés dans le processus d’appariement.\nL’algorithme recherche d’abord la commune indiquée (pour l’instant cette étape n’est pas faite avec ElasticSearch), puis la voie au sein de la commune et enfin l’adresse dans la voie, c’est-à-dire l’existence du numéro et de l’indice de répétition dans les adresses de la voie.\nLa voie retrouvée est typée selon quatre catégories, en fonction du nombre de trigrammes retrouvés :\n\nvoie sûre : l’adresse contient plus de 65 % des trigrammes de la voie du référentiel\n\nvoie peu douteuse : l’adresse contient entre 35 % et 65 % des trigrammes de la voie du référentiel\n\nvoie douteuse : l’adresse contient entre 10 % et 35 % des trigrammes de la voie du référentiel\n\nvoie non retrouvée : pas d’écho ou l’adresse contient moins de 10 % des trigrammes de la voie du référentiel\n\nEn ce qui concerne les adresses, les contrôles portent sur le numéro et l’indice de répétition :\n\nSi l’adresse demandée ne contient pas d’indice de répétition et que le numéro est trouvé, alors l’adresse est sûre.\n\nSi l’adresse demandée contient un indice de répétition et s’il est retrouvé, l’adresse est sûre.\n\nSi l’adresse demandée contient un indice de répétition mais qu’il n’est pas retrouvé, alors l’adresse est douteuse.\n\nSi le numéro n’est pas retrouvé exactement, aucune adresse n’est retournée.\n\nSi une voie est douteuse, alors la qualité de l’adresse globale est douteuse : on ne distingue donc pas les cas où l’adresse est sûre et douteuse.\n\n\n\n\n\n\n\n\n\nAdresse\nVoie\nCode_retour\nLibellé\n\n\n\n\nsûre\nsûre\n10\nAppariement direct sur l’adresse\n\n\nsûre\nsûre\n9\nAdresse sûre\n\n\ndouteuse\nsûre\n8\nAdresse douteuse dans voie sûre\n\n\nsûre & douteuse\ndouteuse\n7\nAdresse dans voie douteuse\n\n\nsûre & douteuse\ntrès douteuse\n6\nAdresse dans voie très douteuse\n\n\npas d’adresse trouvée\nsûre\n5\nVoie sûre sans adresse\n\n\npas d’adresse trouvée\ndouteuse\n4\nVoie douteuse sans adresse\n\n\npas d’adresse trouvée\ntrès douteuse\n3\nVoie très douteuse sans adresse\n\n\npas d’adresse trouvée\npas de voie trouvée\n2\nCommune seulement\n\n\npas d’adresse trouvée\npas de voie trouvée\n1\nAdresse à l’étranger\n\n\npas d’adresse trouvée\npas de voie trouvée\n0\nProblème dans les données (par exemple, commune non trouvée)\n\n\n\n\n\n\nL’objectif de cette information complémentaire est d’indiquer la position de l’écho retourné par rapport aux autres échos possibles dans l’index voies, lors de la requête à l’étape 2. Il permet d’évaluer si le score Elastic du premier écho (noté R1) est bien supérieur au score du second (noté R2).\nLa formule du ratio est 1-(R2/R1) ; si le score est supérieur à 0,9999, il est ramené à 0,9999.\nSi la valeur est proche de 1, alors le premier écho se détache nettement des autres et donc la recherche est sans ambiguïté. A l’inverse, si la valeur est proche de 0, alors le premier et le second écho ont le même score et la recherche aurait donc pu retourner un autre résultat.\nLe score relatif est compris entre 0 et 1 et donné avec 4 décimales. Le score maximal est de 0,9999, afin de pouvoir être utilisé en combinaison avec le code retour.",
    "crumbs": [
      "Accueil",
      "Navigation",
      "Identification d'adresse avec ElasticSearch"
    ]
  },
  {
    "objectID": "src/documentation/elasticsearch.html#algorithme-didentification",
    "href": "src/documentation/elasticsearch.html#algorithme-didentification",
    "title": "Identification d’adresse",
    "section": "",
    "text": "La logique globale de l’algorithme est la suivante :\n\nOn va enchaîner des étapes de contrôles, d’interrogation d’ElasticSearch, de règles de décision.\n\nA chaque étape, il est possible d’attribuer un code retour “sortant” à l’adresse qu’on souhaite identifier. Par exemple, si l’adresse est vide, on attribue un code retour 0 et l’adresse ne va pas plus loin dans l’algorithme.\n\nSi l’adresse n’a pas de code retour attribué, alors on continue dans l’algorithme.\n\nComme précisé plus haut, l’algorithme marche en 4 étapes d’identification: commune —&gt; adresse exacte –si pas de match-&gt; voie —&gt; adresse\n\n\nLes données du client et dans l’index sont traitées de la même façon pour maximiser les matchs :\n- Lowercase\n- Asciifolding\n- Traitement de la ponctuation\n- Utilisation de listes de synonymes\n\n\n\nL’identification à la commune se fait à travers un dictionnaire, pour récupérer l’idGaïaCommune et passer à l’étape suivante.\n\n\n\nAfin d’accélerer notre procédure d’identification, une requête simple et rapide nous permet d’identifier une adresse si son orthographe est parfaite. Cette requête consiste à rechercher au sein des adresses de la commune identifiée à l’étape précédente grâce à un filter sur l’idGaïaCommune, les adresses dont la variable adresseComplete (string représentant l’adresse contenant le numéro, l’indice de répétition, le type et le nom de voie) correspond parfaitement au string envoyé par le client. Ceci est assuré par le caractère stricte de la requête must, accompagné d’un minimum_should_match=100%.\nPour gagner encore plus de temps, la variable adresseComplete ainsi que le string client ne sont pas découpés en token, comme dans les réglages par défaut d’ElasticSearch (le minimum should match est un seuil sur le nombre ou la proportion de bouts matchés entre le résultats de l’index et la demande du client, et un bout peut être le string complet, tout comme un token ou un ngram). Alors, le moteur va retourner l’adresse qui est parfaitement incluse dans le string envoyé.\nEn présence d’un résultat à cette requête, le premier echo est conservé avec un code retour 10 et l’algorithme d’identification se termine à cette étape.\n\n\n\nLa requête pour identifier à la voie est plus complexe car elle inclut la possibilité d’avoir du flou dans l’adresse à rechercher.\nPour faciliter la recherche, un filtre est appliqué pour ne requêter que les voies dans la commune identifiée à l’étape 0.\nC’est une succession de should où au moins l’un d’entre eux doit être validé pour que la voie soit renvoyée :\n- Le nom de voie dans l’index non tokenisé est matché avec une fuzziness de 1 (boost : 200)\n- Le type de voie et/ou le nom de voie du référentiel sont inclus dans l’adresse client avec une fuzziness de 1 (boosts respectifs : 5 et 15)\n- Au moins un ngram du nom de voie de l’index, de taille 3 à 5, correspond (boost par ngram : 1)\nEnsuite, une multitude de vérifications sont appliquées sur le premier echo (s’il existe), qui va déterminer si la voie est sûre, peu douteuse, douteuse ou non retrouvée (citées plus haut).\nS’il n’y a pas de retour ElasticSearch ou si la voie est jugée comme non retrouvée d’après les règles, un code retour 2 sera affiché.\n\n\n\nPour retrouver l’adresse à partir de la voie, nous allons chercher dans les adresses de la voie identifiée à l’étape 2 (avec un filter sur idGaïaVoie) et demander à matcher sur les champs numéro et/ou indice de répétition dans notre base.\nDes regex ont été développées pour extraire le numéro de l’adresse dans le string client et qui détecte la présence d’indice de répétition dans celle-ci. Ensuite, un must est appliqué sur le champ numéro avec l’extraction du numéro. Si l’extraction ne retourne rien, le numéro recherché par le must sera alors “0”. L’indice de répétition sera recherché avec un should.\nSi le moteur retourne plusieurs adresses, l’adresse retournée sera :\n- celle qui a un indice de répétition si un indice a été détecté dans l’adresse recherchée\n- celle qui n’a pas d’indice de répétition si aucun indice n’a été détecté dans l’adresse recherchée\nDans le cas où un idGaïaAdresse est trouvé, il sera accompagné d’un code retour 7, 8 ou 9.\nFinalement, dans le cas où aucune adresse ne ressort, alors un code retour 3, 4 ou 5 sera attribué en fonction de la fiabilité de la voie identifiée.",
    "crumbs": [
      "Accueil",
      "Navigation",
      "Identification d'adresse avec ElasticSearch"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Moteur de recherche d’adresses Gaïa",
    "section": "",
    "text": "Moteur de recherche d’adresses Gaïa\n\n\n\n\n  \n     \n      \n        \n          \n            \n          \n         \n        \n          \n            Documentation\n            \n\n            \n              Description : Ici est rassemblée toute la documentation technique sur le moteur de recherche d'adresse textuel Gaïa\n\n            \n\n            \n            \n              \n                Raya Berova\n                Nov 19, 2024\n              \n            \n            \n            \n              \n                \n                  \n                    \n                      \n                        doc\n                      \n                    \n                  \n                \n              \n            \n          \n        \n\n        \n\n      \n     \n  \n\n  \n     \n      \n        \n          \n            \n          \n         \n        \n          \n            Séminaire interne DMS\n            \n\n            \n              Description : Ce séminaire a pour but de présenter le moteur de recherche d'adresse Gaïa et de diffuser les connaissances sur ElasticSearch au sein de l'Insee.\n\n            \n\n            \n            \n              \n                Raya Berova\n                Nov 19, 2024\n              \n            \n            \n            \n              \n                \n                  \n                    \n                      \n                        pdf\n                      \n                    \n                  \n                \n              \n            \n          \n        \n\n        \n\n      \n     \n  \n\n  \n     \n      \n        \n          \n            \n          \n         \n        \n          \n            Abstract NTTS 2025 (Eurostat)\n            \n\n            \n              Description : Abstract en anglais soumis à NTTS 2025.\n\n            \n\n            \n            \n              \n                Raya Berova\n                Nov 19, 2024\n              \n            \n            \n            \n              \n                \n                  \n                    \n                      \n                        pdf\n                      \n                    \n                  \n                \n              \n            \n          \n        \n\n        \n\n      \n     \n  \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "src/documentation/index.html",
    "href": "src/documentation/index.html",
    "title": "Accueil de la documentation",
    "section": "",
    "text": "Informations de connexion via Filezilla en protocole FTP (connexion FTP simple)\n\n\n\n\n\n\n\n\nPlateforme\nURL\nVM\n\n\n\n\nDV\nhttps://api-interrogation-geo.developpement.insee.fr/swagger-ui/index.html\ndvgaialm001\n\n\nDV2\nhttps://api-interrogation-geo.developpement2.insee.fr/swagger-ui/index.html\ndvgaialm002\n\n\nPREPROD\nhttps://api-interrogation-geo.preprod.insee.fr/swagger-ui/index.html\npdgaialm001/2/3\n\n\nPROD\nhttps://api-interrogation-geo.insee.fr/swagger-ui/index.html\npdgaialm001/2/3\n\n\n\nPour requêter le service d’identification, il faut que l’utilisateur soit authentifié en ayant récupéré un jeton Keycloak au préalable et qu’il bénéficie du rôle IDENTIFICATION_GAIA. Si ce n’est pas le cas, contactez l’équipe Gaïa sur Tchap ou mail.\n\n\n\nPour lancer une identification avec le moteur ElasticSearch développé en python, il faut aller sur le dépôt git et lire le README. Il est possible d’accéder au dépôt en cliquant ici Moteur de recherche Gaïa. Puis aller sur LS3 pour cloner le projet.\n⚠️ Attention : il faut avoir les droits pour accéder au dépôt et être dans le projet LS3. Si ce n’est pas le cas, contactez l’équipe Gaïa sur Tchap ou mail.",
    "crumbs": [
      "Accueil",
      "Navigation",
      "Accueil"
    ]
  },
  {
    "objectID": "src/documentation/index.html#recherche-simple-les-swaggers",
    "href": "src/documentation/index.html#recherche-simple-les-swaggers",
    "title": "Accueil de la documentation",
    "section": "",
    "text": "Informations de connexion via Filezilla en protocole FTP (connexion FTP simple)\n\n\n\n\n\n\n\n\nPlateforme\nURL\nVM\n\n\n\n\nDV\nhttps://api-interrogation-geo.developpement.insee.fr/swagger-ui/index.html\ndvgaialm001\n\n\nDV2\nhttps://api-interrogation-geo.developpement2.insee.fr/swagger-ui/index.html\ndvgaialm002\n\n\nPREPROD\nhttps://api-interrogation-geo.preprod.insee.fr/swagger-ui/index.html\npdgaialm001/2/3\n\n\nPROD\nhttps://api-interrogation-geo.insee.fr/swagger-ui/index.html\npdgaialm001/2/3\n\n\n\nPour requêter le service d’identification, il faut que l’utilisateur soit authentifié en ayant récupéré un jeton Keycloak au préalable et qu’il bénéficie du rôle IDENTIFICATION_GAIA. Si ce n’est pas le cas, contactez l’équipe Gaïa sur Tchap ou mail.",
    "crumbs": [
      "Accueil",
      "Navigation",
      "Accueil"
    ]
  },
  {
    "objectID": "src/documentation/index.html#recherche-avancée-code-python",
    "href": "src/documentation/index.html#recherche-avancée-code-python",
    "title": "Accueil de la documentation",
    "section": "",
    "text": "Pour lancer une identification avec le moteur ElasticSearch développé en python, il faut aller sur le dépôt git et lire le README. Il est possible d’accéder au dépôt en cliquant ici Moteur de recherche Gaïa. Puis aller sur LS3 pour cloner le projet.\n⚠️ Attention : il faut avoir les droits pour accéder au dépôt et être dans le projet LS3. Si ce n’est pas le cas, contactez l’équipe Gaïa sur Tchap ou mail.",
    "crumbs": [
      "Accueil",
      "Navigation",
      "Accueil"
    ]
  }
]